// Code generated by ent, DO NOT EDIT.

package ent

import (
	"chat/internal/data/ent/message"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Message is the model entity for the Message schema.
type Message struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Created holds the value of the "created" field.
	Created time.Time `json:"created,omitempty"`
	// Updated holds the value of the "updated" field.
	Updated time.Time `json:"updated,omitempty"`
	// SessionKey holds the value of the "sessionKey" field.
	SessionKey string `json:"sessionKey,omitempty"`
	// From holds the value of the "from" field.
	From int64 `json:"from,omitempty"`
	// To holds the value of the "to" field.
	To string `json:"to,omitempty"`
	// SessionType holds the value of the "session_type" field.
	SessionType int8 `json:"session_type,omitempty"`
	// ClientMsgID holds the value of the "client_msg_id" field.
	ClientMsgID string `json:"client_msg_id,omitempty"`
	// ServerMsgSeq holds the value of the "server_msg_seq" field.
	ServerMsgSeq int64 `json:"server_msg_seq,omitempty"`
	// MsgType holds the value of the "msg_type" field.
	MsgType int8 `json:"msg_type,omitempty"`
	// MsgData holds the value of the "msg_data" field.
	MsgData string `json:"msg_data,omitempty"`
	// MsgResCode holds the value of the "msg_res_code" field.
	MsgResCode int8 `json:"msg_res_code,omitempty"`
	// MsgFeature holds the value of the "msg_feature" field.
	MsgFeature int8 `json:"msg_feature,omitempty"`
	// MsgStatus holds the value of the "msg_status" field.
	MsgStatus int8 `json:"msg_status,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime int64 `json:"create_time,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Message) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case message.FieldID, message.FieldFrom, message.FieldSessionType, message.FieldServerMsgSeq, message.FieldMsgType, message.FieldMsgResCode, message.FieldMsgFeature, message.FieldMsgStatus, message.FieldCreateTime:
			values[i] = new(sql.NullInt64)
		case message.FieldSessionKey, message.FieldTo, message.FieldClientMsgID, message.FieldMsgData:
			values[i] = new(sql.NullString)
		case message.FieldCreated, message.FieldUpdated:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Message", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Message fields.
func (m *Message) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case message.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int64(value.Int64)
		case message.FieldCreated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created", values[i])
			} else if value.Valid {
				m.Created = value.Time
			}
		case message.FieldUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated", values[i])
			} else if value.Valid {
				m.Updated = value.Time
			}
		case message.FieldSessionKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sessionKey", values[i])
			} else if value.Valid {
				m.SessionKey = value.String
			}
		case message.FieldFrom:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field from", values[i])
			} else if value.Valid {
				m.From = value.Int64
			}
		case message.FieldTo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to", values[i])
			} else if value.Valid {
				m.To = value.String
			}
		case message.FieldSessionType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field session_type", values[i])
			} else if value.Valid {
				m.SessionType = int8(value.Int64)
			}
		case message.FieldClientMsgID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_msg_id", values[i])
			} else if value.Valid {
				m.ClientMsgID = value.String
			}
		case message.FieldServerMsgSeq:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field server_msg_seq", values[i])
			} else if value.Valid {
				m.ServerMsgSeq = value.Int64
			}
		case message.FieldMsgType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field msg_type", values[i])
			} else if value.Valid {
				m.MsgType = int8(value.Int64)
			}
		case message.FieldMsgData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field msg_data", values[i])
			} else if value.Valid {
				m.MsgData = value.String
			}
		case message.FieldMsgResCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field msg_res_code", values[i])
			} else if value.Valid {
				m.MsgResCode = int8(value.Int64)
			}
		case message.FieldMsgFeature:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field msg_feature", values[i])
			} else if value.Valid {
				m.MsgFeature = int8(value.Int64)
			}
		case message.FieldMsgStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field msg_status", values[i])
			} else if value.Valid {
				m.MsgStatus = int8(value.Int64)
			}
		case message.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				m.CreateTime = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Message.
// Note that you need to call Message.Unwrap() before calling this method if this Message
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Message) Update() *MessageUpdateOne {
	return (&MessageClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Message entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Message) Unwrap() *Message {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Message is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Message) String() string {
	var builder strings.Builder
	builder.WriteString("Message(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("created=")
	builder.WriteString(m.Created.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated=")
	builder.WriteString(m.Updated.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sessionKey=")
	builder.WriteString(m.SessionKey)
	builder.WriteString(", ")
	builder.WriteString("from=")
	builder.WriteString(fmt.Sprintf("%v", m.From))
	builder.WriteString(", ")
	builder.WriteString("to=")
	builder.WriteString(m.To)
	builder.WriteString(", ")
	builder.WriteString("session_type=")
	builder.WriteString(fmt.Sprintf("%v", m.SessionType))
	builder.WriteString(", ")
	builder.WriteString("client_msg_id=")
	builder.WriteString(m.ClientMsgID)
	builder.WriteString(", ")
	builder.WriteString("server_msg_seq=")
	builder.WriteString(fmt.Sprintf("%v", m.ServerMsgSeq))
	builder.WriteString(", ")
	builder.WriteString("msg_type=")
	builder.WriteString(fmt.Sprintf("%v", m.MsgType))
	builder.WriteString(", ")
	builder.WriteString("msg_data=")
	builder.WriteString(m.MsgData)
	builder.WriteString(", ")
	builder.WriteString("msg_res_code=")
	builder.WriteString(fmt.Sprintf("%v", m.MsgResCode))
	builder.WriteString(", ")
	builder.WriteString("msg_feature=")
	builder.WriteString(fmt.Sprintf("%v", m.MsgFeature))
	builder.WriteString(", ")
	builder.WriteString("msg_status=")
	builder.WriteString(fmt.Sprintf("%v", m.MsgStatus))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(fmt.Sprintf("%v", m.CreateTime))
	builder.WriteByte(')')
	return builder.String()
}

// Messages is a parsable slice of Message.
type Messages []*Message

func (m Messages) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
