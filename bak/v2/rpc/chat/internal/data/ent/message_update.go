// Code generated by ent, DO NOT EDIT.

package ent

import (
	"chat/internal/data/ent/message"
	"chat/internal/data/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessageUpdate is the builder for updating Message entities.
type MessageUpdate struct {
	config
	hooks    []Hook
	mutation *MessageMutation
}

// Where appends a list predicates to the MessageUpdate builder.
func (mu *MessageUpdate) Where(ps ...predicate.Message) *MessageUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdated sets the "updated" field.
func (mu *MessageUpdate) SetUpdated(t time.Time) *MessageUpdate {
	mu.mutation.SetUpdated(t)
	return mu
}

// SetSessionKey sets the "sessionKey" field.
func (mu *MessageUpdate) SetSessionKey(s string) *MessageUpdate {
	mu.mutation.SetSessionKey(s)
	return mu
}

// SetFrom sets the "from" field.
func (mu *MessageUpdate) SetFrom(i int64) *MessageUpdate {
	mu.mutation.ResetFrom()
	mu.mutation.SetFrom(i)
	return mu
}

// AddFrom adds i to the "from" field.
func (mu *MessageUpdate) AddFrom(i int64) *MessageUpdate {
	mu.mutation.AddFrom(i)
	return mu
}

// SetTo sets the "to" field.
func (mu *MessageUpdate) SetTo(s string) *MessageUpdate {
	mu.mutation.SetTo(s)
	return mu
}

// SetSessionType sets the "session_type" field.
func (mu *MessageUpdate) SetSessionType(i int8) *MessageUpdate {
	mu.mutation.ResetSessionType()
	mu.mutation.SetSessionType(i)
	return mu
}

// AddSessionType adds i to the "session_type" field.
func (mu *MessageUpdate) AddSessionType(i int8) *MessageUpdate {
	mu.mutation.AddSessionType(i)
	return mu
}

// SetClientMsgID sets the "client_msg_id" field.
func (mu *MessageUpdate) SetClientMsgID(s string) *MessageUpdate {
	mu.mutation.SetClientMsgID(s)
	return mu
}

// SetServerMsgSeq sets the "server_msg_seq" field.
func (mu *MessageUpdate) SetServerMsgSeq(i int64) *MessageUpdate {
	mu.mutation.ResetServerMsgSeq()
	mu.mutation.SetServerMsgSeq(i)
	return mu
}

// AddServerMsgSeq adds i to the "server_msg_seq" field.
func (mu *MessageUpdate) AddServerMsgSeq(i int64) *MessageUpdate {
	mu.mutation.AddServerMsgSeq(i)
	return mu
}

// SetMsgType sets the "msg_type" field.
func (mu *MessageUpdate) SetMsgType(i int8) *MessageUpdate {
	mu.mutation.ResetMsgType()
	mu.mutation.SetMsgType(i)
	return mu
}

// AddMsgType adds i to the "msg_type" field.
func (mu *MessageUpdate) AddMsgType(i int8) *MessageUpdate {
	mu.mutation.AddMsgType(i)
	return mu
}

// SetMsgData sets the "msg_data" field.
func (mu *MessageUpdate) SetMsgData(s string) *MessageUpdate {
	mu.mutation.SetMsgData(s)
	return mu
}

// SetMsgResCode sets the "msg_res_code" field.
func (mu *MessageUpdate) SetMsgResCode(i int8) *MessageUpdate {
	mu.mutation.ResetMsgResCode()
	mu.mutation.SetMsgResCode(i)
	return mu
}

// AddMsgResCode adds i to the "msg_res_code" field.
func (mu *MessageUpdate) AddMsgResCode(i int8) *MessageUpdate {
	mu.mutation.AddMsgResCode(i)
	return mu
}

// SetMsgFeature sets the "msg_feature" field.
func (mu *MessageUpdate) SetMsgFeature(i int8) *MessageUpdate {
	mu.mutation.ResetMsgFeature()
	mu.mutation.SetMsgFeature(i)
	return mu
}

// AddMsgFeature adds i to the "msg_feature" field.
func (mu *MessageUpdate) AddMsgFeature(i int8) *MessageUpdate {
	mu.mutation.AddMsgFeature(i)
	return mu
}

// SetMsgStatus sets the "msg_status" field.
func (mu *MessageUpdate) SetMsgStatus(i int8) *MessageUpdate {
	mu.mutation.ResetMsgStatus()
	mu.mutation.SetMsgStatus(i)
	return mu
}

// AddMsgStatus adds i to the "msg_status" field.
func (mu *MessageUpdate) AddMsgStatus(i int8) *MessageUpdate {
	mu.mutation.AddMsgStatus(i)
	return mu
}

// SetCreateTime sets the "create_time" field.
func (mu *MessageUpdate) SetCreateTime(i int64) *MessageUpdate {
	mu.mutation.ResetCreateTime()
	mu.mutation.SetCreateTime(i)
	return mu
}

// AddCreateTime adds i to the "create_time" field.
func (mu *MessageUpdate) AddCreateTime(i int64) *MessageUpdate {
	mu.mutation.AddCreateTime(i)
	return mu
}

// Mutation returns the MessageMutation object of the builder.
func (mu *MessageUpdate) Mutation() *MessageMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MessageUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	mu.defaults()
	if len(mu.hooks) == 0 {
		if err = mu.check(); err != nil {
			return 0, err
		}
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mu.check(); err != nil {
				return 0, err
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			if mu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MessageUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MessageUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MessageUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MessageUpdate) defaults() {
	if _, ok := mu.mutation.Updated(); !ok {
		v := message.UpdateDefaultUpdated()
		mu.mutation.SetUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MessageUpdate) check() error {
	if v, ok := mu.mutation.SessionKey(); ok {
		if err := message.SessionKeyValidator(v); err != nil {
			return &ValidationError{Name: "sessionKey", err: fmt.Errorf(`ent: validator failed for field "Message.sessionKey": %w`, err)}
		}
	}
	if v, ok := mu.mutation.To(); ok {
		if err := message.ToValidator(v); err != nil {
			return &ValidationError{Name: "to", err: fmt.Errorf(`ent: validator failed for field "Message.to": %w`, err)}
		}
	}
	if v, ok := mu.mutation.ClientMsgID(); ok {
		if err := message.ClientMsgIDValidator(v); err != nil {
			return &ValidationError{Name: "client_msg_id", err: fmt.Errorf(`ent: validator failed for field "Message.client_msg_id": %w`, err)}
		}
	}
	if v, ok := mu.mutation.MsgData(); ok {
		if err := message.MsgDataValidator(v); err != nil {
			return &ValidationError{Name: "msg_data", err: fmt.Errorf(`ent: validator failed for field "Message.msg_data": %w`, err)}
		}
	}
	return nil
}

func (mu *MessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   message.Table,
			Columns: message.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: message.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Updated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: message.FieldUpdated,
		})
	}
	if value, ok := mu.mutation.SessionKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldSessionKey,
		})
	}
	if value, ok := mu.mutation.From(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: message.FieldFrom,
		})
	}
	if value, ok := mu.mutation.AddedFrom(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: message.FieldFrom,
		})
	}
	if value, ok := mu.mutation.To(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldTo,
		})
	}
	if value, ok := mu.mutation.SessionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: message.FieldSessionType,
		})
	}
	if value, ok := mu.mutation.AddedSessionType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: message.FieldSessionType,
		})
	}
	if value, ok := mu.mutation.ClientMsgID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldClientMsgID,
		})
	}
	if value, ok := mu.mutation.ServerMsgSeq(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: message.FieldServerMsgSeq,
		})
	}
	if value, ok := mu.mutation.AddedServerMsgSeq(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: message.FieldServerMsgSeq,
		})
	}
	if value, ok := mu.mutation.MsgType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: message.FieldMsgType,
		})
	}
	if value, ok := mu.mutation.AddedMsgType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: message.FieldMsgType,
		})
	}
	if value, ok := mu.mutation.MsgData(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldMsgData,
		})
	}
	if value, ok := mu.mutation.MsgResCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: message.FieldMsgResCode,
		})
	}
	if value, ok := mu.mutation.AddedMsgResCode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: message.FieldMsgResCode,
		})
	}
	if value, ok := mu.mutation.MsgFeature(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: message.FieldMsgFeature,
		})
	}
	if value, ok := mu.mutation.AddedMsgFeature(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: message.FieldMsgFeature,
		})
	}
	if value, ok := mu.mutation.MsgStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: message.FieldMsgStatus,
		})
	}
	if value, ok := mu.mutation.AddedMsgStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: message.FieldMsgStatus,
		})
	}
	if value, ok := mu.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: message.FieldCreateTime,
		})
	}
	if value, ok := mu.mutation.AddedCreateTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: message.FieldCreateTime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// MessageUpdateOne is the builder for updating a single Message entity.
type MessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MessageMutation
}

// SetUpdated sets the "updated" field.
func (muo *MessageUpdateOne) SetUpdated(t time.Time) *MessageUpdateOne {
	muo.mutation.SetUpdated(t)
	return muo
}

// SetSessionKey sets the "sessionKey" field.
func (muo *MessageUpdateOne) SetSessionKey(s string) *MessageUpdateOne {
	muo.mutation.SetSessionKey(s)
	return muo
}

// SetFrom sets the "from" field.
func (muo *MessageUpdateOne) SetFrom(i int64) *MessageUpdateOne {
	muo.mutation.ResetFrom()
	muo.mutation.SetFrom(i)
	return muo
}

// AddFrom adds i to the "from" field.
func (muo *MessageUpdateOne) AddFrom(i int64) *MessageUpdateOne {
	muo.mutation.AddFrom(i)
	return muo
}

// SetTo sets the "to" field.
func (muo *MessageUpdateOne) SetTo(s string) *MessageUpdateOne {
	muo.mutation.SetTo(s)
	return muo
}

// SetSessionType sets the "session_type" field.
func (muo *MessageUpdateOne) SetSessionType(i int8) *MessageUpdateOne {
	muo.mutation.ResetSessionType()
	muo.mutation.SetSessionType(i)
	return muo
}

// AddSessionType adds i to the "session_type" field.
func (muo *MessageUpdateOne) AddSessionType(i int8) *MessageUpdateOne {
	muo.mutation.AddSessionType(i)
	return muo
}

// SetClientMsgID sets the "client_msg_id" field.
func (muo *MessageUpdateOne) SetClientMsgID(s string) *MessageUpdateOne {
	muo.mutation.SetClientMsgID(s)
	return muo
}

// SetServerMsgSeq sets the "server_msg_seq" field.
func (muo *MessageUpdateOne) SetServerMsgSeq(i int64) *MessageUpdateOne {
	muo.mutation.ResetServerMsgSeq()
	muo.mutation.SetServerMsgSeq(i)
	return muo
}

// AddServerMsgSeq adds i to the "server_msg_seq" field.
func (muo *MessageUpdateOne) AddServerMsgSeq(i int64) *MessageUpdateOne {
	muo.mutation.AddServerMsgSeq(i)
	return muo
}

// SetMsgType sets the "msg_type" field.
func (muo *MessageUpdateOne) SetMsgType(i int8) *MessageUpdateOne {
	muo.mutation.ResetMsgType()
	muo.mutation.SetMsgType(i)
	return muo
}

// AddMsgType adds i to the "msg_type" field.
func (muo *MessageUpdateOne) AddMsgType(i int8) *MessageUpdateOne {
	muo.mutation.AddMsgType(i)
	return muo
}

// SetMsgData sets the "msg_data" field.
func (muo *MessageUpdateOne) SetMsgData(s string) *MessageUpdateOne {
	muo.mutation.SetMsgData(s)
	return muo
}

// SetMsgResCode sets the "msg_res_code" field.
func (muo *MessageUpdateOne) SetMsgResCode(i int8) *MessageUpdateOne {
	muo.mutation.ResetMsgResCode()
	muo.mutation.SetMsgResCode(i)
	return muo
}

// AddMsgResCode adds i to the "msg_res_code" field.
func (muo *MessageUpdateOne) AddMsgResCode(i int8) *MessageUpdateOne {
	muo.mutation.AddMsgResCode(i)
	return muo
}

// SetMsgFeature sets the "msg_feature" field.
func (muo *MessageUpdateOne) SetMsgFeature(i int8) *MessageUpdateOne {
	muo.mutation.ResetMsgFeature()
	muo.mutation.SetMsgFeature(i)
	return muo
}

// AddMsgFeature adds i to the "msg_feature" field.
func (muo *MessageUpdateOne) AddMsgFeature(i int8) *MessageUpdateOne {
	muo.mutation.AddMsgFeature(i)
	return muo
}

// SetMsgStatus sets the "msg_status" field.
func (muo *MessageUpdateOne) SetMsgStatus(i int8) *MessageUpdateOne {
	muo.mutation.ResetMsgStatus()
	muo.mutation.SetMsgStatus(i)
	return muo
}

// AddMsgStatus adds i to the "msg_status" field.
func (muo *MessageUpdateOne) AddMsgStatus(i int8) *MessageUpdateOne {
	muo.mutation.AddMsgStatus(i)
	return muo
}

// SetCreateTime sets the "create_time" field.
func (muo *MessageUpdateOne) SetCreateTime(i int64) *MessageUpdateOne {
	muo.mutation.ResetCreateTime()
	muo.mutation.SetCreateTime(i)
	return muo
}

// AddCreateTime adds i to the "create_time" field.
func (muo *MessageUpdateOne) AddCreateTime(i int64) *MessageUpdateOne {
	muo.mutation.AddCreateTime(i)
	return muo
}

// Mutation returns the MessageMutation object of the builder.
func (muo *MessageUpdateOne) Mutation() *MessageMutation {
	return muo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MessageUpdateOne) Select(field string, fields ...string) *MessageUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Message entity.
func (muo *MessageUpdateOne) Save(ctx context.Context) (*Message, error) {
	var (
		err  error
		node *Message
	)
	muo.defaults()
	if len(muo.hooks) == 0 {
		if err = muo.check(); err != nil {
			return nil, err
		}
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = muo.check(); err != nil {
				return nil, err
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			if muo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = muo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, muo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Message)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MessageMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MessageUpdateOne) SaveX(ctx context.Context) *Message {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MessageUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MessageUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MessageUpdateOne) defaults() {
	if _, ok := muo.mutation.Updated(); !ok {
		v := message.UpdateDefaultUpdated()
		muo.mutation.SetUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MessageUpdateOne) check() error {
	if v, ok := muo.mutation.SessionKey(); ok {
		if err := message.SessionKeyValidator(v); err != nil {
			return &ValidationError{Name: "sessionKey", err: fmt.Errorf(`ent: validator failed for field "Message.sessionKey": %w`, err)}
		}
	}
	if v, ok := muo.mutation.To(); ok {
		if err := message.ToValidator(v); err != nil {
			return &ValidationError{Name: "to", err: fmt.Errorf(`ent: validator failed for field "Message.to": %w`, err)}
		}
	}
	if v, ok := muo.mutation.ClientMsgID(); ok {
		if err := message.ClientMsgIDValidator(v); err != nil {
			return &ValidationError{Name: "client_msg_id", err: fmt.Errorf(`ent: validator failed for field "Message.client_msg_id": %w`, err)}
		}
	}
	if v, ok := muo.mutation.MsgData(); ok {
		if err := message.MsgDataValidator(v); err != nil {
			return &ValidationError{Name: "msg_data", err: fmt.Errorf(`ent: validator failed for field "Message.msg_data": %w`, err)}
		}
	}
	return nil
}

func (muo *MessageUpdateOne) sqlSave(ctx context.Context) (_node *Message, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   message.Table,
			Columns: message.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: message.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Message.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, message.FieldID)
		for _, f := range fields {
			if !message.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != message.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Updated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: message.FieldUpdated,
		})
	}
	if value, ok := muo.mutation.SessionKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldSessionKey,
		})
	}
	if value, ok := muo.mutation.From(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: message.FieldFrom,
		})
	}
	if value, ok := muo.mutation.AddedFrom(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: message.FieldFrom,
		})
	}
	if value, ok := muo.mutation.To(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldTo,
		})
	}
	if value, ok := muo.mutation.SessionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: message.FieldSessionType,
		})
	}
	if value, ok := muo.mutation.AddedSessionType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: message.FieldSessionType,
		})
	}
	if value, ok := muo.mutation.ClientMsgID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldClientMsgID,
		})
	}
	if value, ok := muo.mutation.ServerMsgSeq(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: message.FieldServerMsgSeq,
		})
	}
	if value, ok := muo.mutation.AddedServerMsgSeq(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: message.FieldServerMsgSeq,
		})
	}
	if value, ok := muo.mutation.MsgType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: message.FieldMsgType,
		})
	}
	if value, ok := muo.mutation.AddedMsgType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: message.FieldMsgType,
		})
	}
	if value, ok := muo.mutation.MsgData(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldMsgData,
		})
	}
	if value, ok := muo.mutation.MsgResCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: message.FieldMsgResCode,
		})
	}
	if value, ok := muo.mutation.AddedMsgResCode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: message.FieldMsgResCode,
		})
	}
	if value, ok := muo.mutation.MsgFeature(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: message.FieldMsgFeature,
		})
	}
	if value, ok := muo.mutation.AddedMsgFeature(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: message.FieldMsgFeature,
		})
	}
	if value, ok := muo.mutation.MsgStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: message.FieldMsgStatus,
		})
	}
	if value, ok := muo.mutation.AddedMsgStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: message.FieldMsgStatus,
		})
	}
	if value, ok := muo.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: message.FieldCreateTime,
		})
	}
	if value, ok := muo.mutation.AddedCreateTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: message.FieldCreateTime,
		})
	}
	_node = &Message{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
