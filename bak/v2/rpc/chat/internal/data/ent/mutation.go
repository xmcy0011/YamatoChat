// Code generated by ent, DO NOT EDIT.

package ent

import (
	"chat/internal/data/ent/message"
	"chat/internal/data/ent/predicate"
	"chat/internal/data/ent/session"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMessage = "Message"
	TypeSession = "Session"
)

// MessageMutation represents an operation that mutates the Message nodes in the graph.
type MessageMutation struct {
	config
	op                Op
	typ               string
	id                *int64
	created           *time.Time
	updated           *time.Time
	sessionKey        *string
	from              *int64
	addfrom           *int64
	to                *string
	session_type      *int8
	addsession_type   *int8
	client_msg_id     *string
	server_msg_seq    *int64
	addserver_msg_seq *int64
	msg_type          *int8
	addmsg_type       *int8
	msg_data          *string
	msg_res_code      *int8
	addmsg_res_code   *int8
	msg_feature       *int8
	addmsg_feature    *int8
	msg_status        *int8
	addmsg_status     *int8
	create_time       *int64
	addcreate_time    *int64
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*Message, error)
	predicates        []predicate.Message
}

var _ ent.Mutation = (*MessageMutation)(nil)

// messageOption allows management of the mutation configuration using functional options.
type messageOption func(*MessageMutation)

// newMessageMutation creates new mutation for the Message entity.
func newMessageMutation(c config, op Op, opts ...messageOption) *MessageMutation {
	m := &MessageMutation{
		config:        c,
		op:            op,
		typ:           TypeMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageID sets the ID field of the mutation.
func withMessageID(id int64) messageOption {
	return func(m *MessageMutation) {
		var (
			err   error
			once  sync.Once
			value *Message
		)
		m.oldValue = func(ctx context.Context) (*Message, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Message.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessage sets the old Message of the mutation.
func withMessage(node *Message) messageOption {
	return func(m *MessageMutation) {
		m.oldValue = func(context.Context) (*Message, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Message entities.
func (m *MessageMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MessageMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MessageMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Message.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreated sets the "created" field.
func (m *MessageMutation) SetCreated(t time.Time) {
	m.created = &t
}

// Created returns the value of the "created" field in the mutation.
func (m *MessageMutation) Created() (r time.Time, exists bool) {
	v := m.created
	if v == nil {
		return
	}
	return *v, true
}

// OldCreated returns the old "created" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldCreated(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreated: %w", err)
	}
	return oldValue.Created, nil
}

// ResetCreated resets all changes to the "created" field.
func (m *MessageMutation) ResetCreated() {
	m.created = nil
}

// SetUpdated sets the "updated" field.
func (m *MessageMutation) SetUpdated(t time.Time) {
	m.updated = &t
}

// Updated returns the value of the "updated" field in the mutation.
func (m *MessageMutation) Updated() (r time.Time, exists bool) {
	v := m.updated
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdated returns the old "updated" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldUpdated(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdated: %w", err)
	}
	return oldValue.Updated, nil
}

// ResetUpdated resets all changes to the "updated" field.
func (m *MessageMutation) ResetUpdated() {
	m.updated = nil
}

// SetSessionKey sets the "sessionKey" field.
func (m *MessageMutation) SetSessionKey(s string) {
	m.sessionKey = &s
}

// SessionKey returns the value of the "sessionKey" field in the mutation.
func (m *MessageMutation) SessionKey() (r string, exists bool) {
	v := m.sessionKey
	if v == nil {
		return
	}
	return *v, true
}

// OldSessionKey returns the old "sessionKey" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldSessionKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSessionKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSessionKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessionKey: %w", err)
	}
	return oldValue.SessionKey, nil
}

// ResetSessionKey resets all changes to the "sessionKey" field.
func (m *MessageMutation) ResetSessionKey() {
	m.sessionKey = nil
}

// SetFrom sets the "from" field.
func (m *MessageMutation) SetFrom(i int64) {
	m.from = &i
	m.addfrom = nil
}

// From returns the value of the "from" field in the mutation.
func (m *MessageMutation) From() (r int64, exists bool) {
	v := m.from
	if v == nil {
		return
	}
	return *v, true
}

// OldFrom returns the old "from" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldFrom(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFrom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFrom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFrom: %w", err)
	}
	return oldValue.From, nil
}

// AddFrom adds i to the "from" field.
func (m *MessageMutation) AddFrom(i int64) {
	if m.addfrom != nil {
		*m.addfrom += i
	} else {
		m.addfrom = &i
	}
}

// AddedFrom returns the value that was added to the "from" field in this mutation.
func (m *MessageMutation) AddedFrom() (r int64, exists bool) {
	v := m.addfrom
	if v == nil {
		return
	}
	return *v, true
}

// ResetFrom resets all changes to the "from" field.
func (m *MessageMutation) ResetFrom() {
	m.from = nil
	m.addfrom = nil
}

// SetTo sets the "to" field.
func (m *MessageMutation) SetTo(s string) {
	m.to = &s
}

// To returns the value of the "to" field in the mutation.
func (m *MessageMutation) To() (r string, exists bool) {
	v := m.to
	if v == nil {
		return
	}
	return *v, true
}

// OldTo returns the old "to" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldTo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTo: %w", err)
	}
	return oldValue.To, nil
}

// ResetTo resets all changes to the "to" field.
func (m *MessageMutation) ResetTo() {
	m.to = nil
}

// SetSessionType sets the "session_type" field.
func (m *MessageMutation) SetSessionType(i int8) {
	m.session_type = &i
	m.addsession_type = nil
}

// SessionType returns the value of the "session_type" field in the mutation.
func (m *MessageMutation) SessionType() (r int8, exists bool) {
	v := m.session_type
	if v == nil {
		return
	}
	return *v, true
}

// OldSessionType returns the old "session_type" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldSessionType(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSessionType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSessionType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessionType: %w", err)
	}
	return oldValue.SessionType, nil
}

// AddSessionType adds i to the "session_type" field.
func (m *MessageMutation) AddSessionType(i int8) {
	if m.addsession_type != nil {
		*m.addsession_type += i
	} else {
		m.addsession_type = &i
	}
}

// AddedSessionType returns the value that was added to the "session_type" field in this mutation.
func (m *MessageMutation) AddedSessionType() (r int8, exists bool) {
	v := m.addsession_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetSessionType resets all changes to the "session_type" field.
func (m *MessageMutation) ResetSessionType() {
	m.session_type = nil
	m.addsession_type = nil
}

// SetClientMsgID sets the "client_msg_id" field.
func (m *MessageMutation) SetClientMsgID(s string) {
	m.client_msg_id = &s
}

// ClientMsgID returns the value of the "client_msg_id" field in the mutation.
func (m *MessageMutation) ClientMsgID() (r string, exists bool) {
	v := m.client_msg_id
	if v == nil {
		return
	}
	return *v, true
}

// OldClientMsgID returns the old "client_msg_id" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldClientMsgID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientMsgID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientMsgID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientMsgID: %w", err)
	}
	return oldValue.ClientMsgID, nil
}

// ResetClientMsgID resets all changes to the "client_msg_id" field.
func (m *MessageMutation) ResetClientMsgID() {
	m.client_msg_id = nil
}

// SetServerMsgSeq sets the "server_msg_seq" field.
func (m *MessageMutation) SetServerMsgSeq(i int64) {
	m.server_msg_seq = &i
	m.addserver_msg_seq = nil
}

// ServerMsgSeq returns the value of the "server_msg_seq" field in the mutation.
func (m *MessageMutation) ServerMsgSeq() (r int64, exists bool) {
	v := m.server_msg_seq
	if v == nil {
		return
	}
	return *v, true
}

// OldServerMsgSeq returns the old "server_msg_seq" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldServerMsgSeq(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldServerMsgSeq is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldServerMsgSeq requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldServerMsgSeq: %w", err)
	}
	return oldValue.ServerMsgSeq, nil
}

// AddServerMsgSeq adds i to the "server_msg_seq" field.
func (m *MessageMutation) AddServerMsgSeq(i int64) {
	if m.addserver_msg_seq != nil {
		*m.addserver_msg_seq += i
	} else {
		m.addserver_msg_seq = &i
	}
}

// AddedServerMsgSeq returns the value that was added to the "server_msg_seq" field in this mutation.
func (m *MessageMutation) AddedServerMsgSeq() (r int64, exists bool) {
	v := m.addserver_msg_seq
	if v == nil {
		return
	}
	return *v, true
}

// ResetServerMsgSeq resets all changes to the "server_msg_seq" field.
func (m *MessageMutation) ResetServerMsgSeq() {
	m.server_msg_seq = nil
	m.addserver_msg_seq = nil
}

// SetMsgType sets the "msg_type" field.
func (m *MessageMutation) SetMsgType(i int8) {
	m.msg_type = &i
	m.addmsg_type = nil
}

// MsgType returns the value of the "msg_type" field in the mutation.
func (m *MessageMutation) MsgType() (r int8, exists bool) {
	v := m.msg_type
	if v == nil {
		return
	}
	return *v, true
}

// OldMsgType returns the old "msg_type" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldMsgType(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsgType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsgType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsgType: %w", err)
	}
	return oldValue.MsgType, nil
}

// AddMsgType adds i to the "msg_type" field.
func (m *MessageMutation) AddMsgType(i int8) {
	if m.addmsg_type != nil {
		*m.addmsg_type += i
	} else {
		m.addmsg_type = &i
	}
}

// AddedMsgType returns the value that was added to the "msg_type" field in this mutation.
func (m *MessageMutation) AddedMsgType() (r int8, exists bool) {
	v := m.addmsg_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetMsgType resets all changes to the "msg_type" field.
func (m *MessageMutation) ResetMsgType() {
	m.msg_type = nil
	m.addmsg_type = nil
}

// SetMsgData sets the "msg_data" field.
func (m *MessageMutation) SetMsgData(s string) {
	m.msg_data = &s
}

// MsgData returns the value of the "msg_data" field in the mutation.
func (m *MessageMutation) MsgData() (r string, exists bool) {
	v := m.msg_data
	if v == nil {
		return
	}
	return *v, true
}

// OldMsgData returns the old "msg_data" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldMsgData(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsgData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsgData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsgData: %w", err)
	}
	return oldValue.MsgData, nil
}

// ResetMsgData resets all changes to the "msg_data" field.
func (m *MessageMutation) ResetMsgData() {
	m.msg_data = nil
}

// SetMsgResCode sets the "msg_res_code" field.
func (m *MessageMutation) SetMsgResCode(i int8) {
	m.msg_res_code = &i
	m.addmsg_res_code = nil
}

// MsgResCode returns the value of the "msg_res_code" field in the mutation.
func (m *MessageMutation) MsgResCode() (r int8, exists bool) {
	v := m.msg_res_code
	if v == nil {
		return
	}
	return *v, true
}

// OldMsgResCode returns the old "msg_res_code" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldMsgResCode(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsgResCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsgResCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsgResCode: %w", err)
	}
	return oldValue.MsgResCode, nil
}

// AddMsgResCode adds i to the "msg_res_code" field.
func (m *MessageMutation) AddMsgResCode(i int8) {
	if m.addmsg_res_code != nil {
		*m.addmsg_res_code += i
	} else {
		m.addmsg_res_code = &i
	}
}

// AddedMsgResCode returns the value that was added to the "msg_res_code" field in this mutation.
func (m *MessageMutation) AddedMsgResCode() (r int8, exists bool) {
	v := m.addmsg_res_code
	if v == nil {
		return
	}
	return *v, true
}

// ResetMsgResCode resets all changes to the "msg_res_code" field.
func (m *MessageMutation) ResetMsgResCode() {
	m.msg_res_code = nil
	m.addmsg_res_code = nil
}

// SetMsgFeature sets the "msg_feature" field.
func (m *MessageMutation) SetMsgFeature(i int8) {
	m.msg_feature = &i
	m.addmsg_feature = nil
}

// MsgFeature returns the value of the "msg_feature" field in the mutation.
func (m *MessageMutation) MsgFeature() (r int8, exists bool) {
	v := m.msg_feature
	if v == nil {
		return
	}
	return *v, true
}

// OldMsgFeature returns the old "msg_feature" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldMsgFeature(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsgFeature is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsgFeature requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsgFeature: %w", err)
	}
	return oldValue.MsgFeature, nil
}

// AddMsgFeature adds i to the "msg_feature" field.
func (m *MessageMutation) AddMsgFeature(i int8) {
	if m.addmsg_feature != nil {
		*m.addmsg_feature += i
	} else {
		m.addmsg_feature = &i
	}
}

// AddedMsgFeature returns the value that was added to the "msg_feature" field in this mutation.
func (m *MessageMutation) AddedMsgFeature() (r int8, exists bool) {
	v := m.addmsg_feature
	if v == nil {
		return
	}
	return *v, true
}

// ResetMsgFeature resets all changes to the "msg_feature" field.
func (m *MessageMutation) ResetMsgFeature() {
	m.msg_feature = nil
	m.addmsg_feature = nil
}

// SetMsgStatus sets the "msg_status" field.
func (m *MessageMutation) SetMsgStatus(i int8) {
	m.msg_status = &i
	m.addmsg_status = nil
}

// MsgStatus returns the value of the "msg_status" field in the mutation.
func (m *MessageMutation) MsgStatus() (r int8, exists bool) {
	v := m.msg_status
	if v == nil {
		return
	}
	return *v, true
}

// OldMsgStatus returns the old "msg_status" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldMsgStatus(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsgStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsgStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsgStatus: %w", err)
	}
	return oldValue.MsgStatus, nil
}

// AddMsgStatus adds i to the "msg_status" field.
func (m *MessageMutation) AddMsgStatus(i int8) {
	if m.addmsg_status != nil {
		*m.addmsg_status += i
	} else {
		m.addmsg_status = &i
	}
}

// AddedMsgStatus returns the value that was added to the "msg_status" field in this mutation.
func (m *MessageMutation) AddedMsgStatus() (r int8, exists bool) {
	v := m.addmsg_status
	if v == nil {
		return
	}
	return *v, true
}

// ResetMsgStatus resets all changes to the "msg_status" field.
func (m *MessageMutation) ResetMsgStatus() {
	m.msg_status = nil
	m.addmsg_status = nil
}

// SetCreateTime sets the "create_time" field.
func (m *MessageMutation) SetCreateTime(i int64) {
	m.create_time = &i
	m.addcreate_time = nil
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *MessageMutation) CreateTime() (r int64, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldCreateTime(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// AddCreateTime adds i to the "create_time" field.
func (m *MessageMutation) AddCreateTime(i int64) {
	if m.addcreate_time != nil {
		*m.addcreate_time += i
	} else {
		m.addcreate_time = &i
	}
}

// AddedCreateTime returns the value that was added to the "create_time" field in this mutation.
func (m *MessageMutation) AddedCreateTime() (r int64, exists bool) {
	v := m.addcreate_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *MessageMutation) ResetCreateTime() {
	m.create_time = nil
	m.addcreate_time = nil
}

// Where appends a list predicates to the MessageMutation builder.
func (m *MessageMutation) Where(ps ...predicate.Message) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MessageMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Message).
func (m *MessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.created != nil {
		fields = append(fields, message.FieldCreated)
	}
	if m.updated != nil {
		fields = append(fields, message.FieldUpdated)
	}
	if m.sessionKey != nil {
		fields = append(fields, message.FieldSessionKey)
	}
	if m.from != nil {
		fields = append(fields, message.FieldFrom)
	}
	if m.to != nil {
		fields = append(fields, message.FieldTo)
	}
	if m.session_type != nil {
		fields = append(fields, message.FieldSessionType)
	}
	if m.client_msg_id != nil {
		fields = append(fields, message.FieldClientMsgID)
	}
	if m.server_msg_seq != nil {
		fields = append(fields, message.FieldServerMsgSeq)
	}
	if m.msg_type != nil {
		fields = append(fields, message.FieldMsgType)
	}
	if m.msg_data != nil {
		fields = append(fields, message.FieldMsgData)
	}
	if m.msg_res_code != nil {
		fields = append(fields, message.FieldMsgResCode)
	}
	if m.msg_feature != nil {
		fields = append(fields, message.FieldMsgFeature)
	}
	if m.msg_status != nil {
		fields = append(fields, message.FieldMsgStatus)
	}
	if m.create_time != nil {
		fields = append(fields, message.FieldCreateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case message.FieldCreated:
		return m.Created()
	case message.FieldUpdated:
		return m.Updated()
	case message.FieldSessionKey:
		return m.SessionKey()
	case message.FieldFrom:
		return m.From()
	case message.FieldTo:
		return m.To()
	case message.FieldSessionType:
		return m.SessionType()
	case message.FieldClientMsgID:
		return m.ClientMsgID()
	case message.FieldServerMsgSeq:
		return m.ServerMsgSeq()
	case message.FieldMsgType:
		return m.MsgType()
	case message.FieldMsgData:
		return m.MsgData()
	case message.FieldMsgResCode:
		return m.MsgResCode()
	case message.FieldMsgFeature:
		return m.MsgFeature()
	case message.FieldMsgStatus:
		return m.MsgStatus()
	case message.FieldCreateTime:
		return m.CreateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case message.FieldCreated:
		return m.OldCreated(ctx)
	case message.FieldUpdated:
		return m.OldUpdated(ctx)
	case message.FieldSessionKey:
		return m.OldSessionKey(ctx)
	case message.FieldFrom:
		return m.OldFrom(ctx)
	case message.FieldTo:
		return m.OldTo(ctx)
	case message.FieldSessionType:
		return m.OldSessionType(ctx)
	case message.FieldClientMsgID:
		return m.OldClientMsgID(ctx)
	case message.FieldServerMsgSeq:
		return m.OldServerMsgSeq(ctx)
	case message.FieldMsgType:
		return m.OldMsgType(ctx)
	case message.FieldMsgData:
		return m.OldMsgData(ctx)
	case message.FieldMsgResCode:
		return m.OldMsgResCode(ctx)
	case message.FieldMsgFeature:
		return m.OldMsgFeature(ctx)
	case message.FieldMsgStatus:
		return m.OldMsgStatus(ctx)
	case message.FieldCreateTime:
		return m.OldCreateTime(ctx)
	}
	return nil, fmt.Errorf("unknown Message field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case message.FieldCreated:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreated(v)
		return nil
	case message.FieldUpdated:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdated(v)
		return nil
	case message.FieldSessionKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionKey(v)
		return nil
	case message.FieldFrom:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFrom(v)
		return nil
	case message.FieldTo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTo(v)
		return nil
	case message.FieldSessionType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionType(v)
		return nil
	case message.FieldClientMsgID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientMsgID(v)
		return nil
	case message.FieldServerMsgSeq:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetServerMsgSeq(v)
		return nil
	case message.FieldMsgType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsgType(v)
		return nil
	case message.FieldMsgData:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsgData(v)
		return nil
	case message.FieldMsgResCode:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsgResCode(v)
		return nil
	case message.FieldMsgFeature:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsgFeature(v)
		return nil
	case message.FieldMsgStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsgStatus(v)
		return nil
	case message.FieldCreateTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	}
	return fmt.Errorf("unknown Message field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageMutation) AddedFields() []string {
	var fields []string
	if m.addfrom != nil {
		fields = append(fields, message.FieldFrom)
	}
	if m.addsession_type != nil {
		fields = append(fields, message.FieldSessionType)
	}
	if m.addserver_msg_seq != nil {
		fields = append(fields, message.FieldServerMsgSeq)
	}
	if m.addmsg_type != nil {
		fields = append(fields, message.FieldMsgType)
	}
	if m.addmsg_res_code != nil {
		fields = append(fields, message.FieldMsgResCode)
	}
	if m.addmsg_feature != nil {
		fields = append(fields, message.FieldMsgFeature)
	}
	if m.addmsg_status != nil {
		fields = append(fields, message.FieldMsgStatus)
	}
	if m.addcreate_time != nil {
		fields = append(fields, message.FieldCreateTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case message.FieldFrom:
		return m.AddedFrom()
	case message.FieldSessionType:
		return m.AddedSessionType()
	case message.FieldServerMsgSeq:
		return m.AddedServerMsgSeq()
	case message.FieldMsgType:
		return m.AddedMsgType()
	case message.FieldMsgResCode:
		return m.AddedMsgResCode()
	case message.FieldMsgFeature:
		return m.AddedMsgFeature()
	case message.FieldMsgStatus:
		return m.AddedMsgStatus()
	case message.FieldCreateTime:
		return m.AddedCreateTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case message.FieldFrom:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFrom(v)
		return nil
	case message.FieldSessionType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSessionType(v)
		return nil
	case message.FieldServerMsgSeq:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddServerMsgSeq(v)
		return nil
	case message.FieldMsgType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMsgType(v)
		return nil
	case message.FieldMsgResCode:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMsgResCode(v)
		return nil
	case message.FieldMsgFeature:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMsgFeature(v)
		return nil
	case message.FieldMsgStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMsgStatus(v)
		return nil
	case message.FieldCreateTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateTime(v)
		return nil
	}
	return fmt.Errorf("unknown Message numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Message nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageMutation) ResetField(name string) error {
	switch name {
	case message.FieldCreated:
		m.ResetCreated()
		return nil
	case message.FieldUpdated:
		m.ResetUpdated()
		return nil
	case message.FieldSessionKey:
		m.ResetSessionKey()
		return nil
	case message.FieldFrom:
		m.ResetFrom()
		return nil
	case message.FieldTo:
		m.ResetTo()
		return nil
	case message.FieldSessionType:
		m.ResetSessionType()
		return nil
	case message.FieldClientMsgID:
		m.ResetClientMsgID()
		return nil
	case message.FieldServerMsgSeq:
		m.ResetServerMsgSeq()
		return nil
	case message.FieldMsgType:
		m.ResetMsgType()
		return nil
	case message.FieldMsgData:
		m.ResetMsgData()
		return nil
	case message.FieldMsgResCode:
		m.ResetMsgResCode()
		return nil
	case message.FieldMsgFeature:
		m.ResetMsgFeature()
		return nil
	case message.FieldMsgStatus:
		m.ResetMsgStatus()
		return nil
	case message.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	}
	return fmt.Errorf("unknown Message field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Message unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Message edge %s", name)
}

// SessionMutation represents an operation that mutates the Session nodes in the graph.
type SessionMutation struct {
	config
	op                Op
	typ               string
	id                *int32
	created           *time.Time
	updated           *time.Time
	user_id           *string
	peer_id           *string
	session_type      *int8
	addsession_type   *int8
	session_status    *int8
	addsession_status *int8
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*Session, error)
	predicates        []predicate.Session
}

var _ ent.Mutation = (*SessionMutation)(nil)

// sessionOption allows management of the mutation configuration using functional options.
type sessionOption func(*SessionMutation)

// newSessionMutation creates new mutation for the Session entity.
func newSessionMutation(c config, op Op, opts ...sessionOption) *SessionMutation {
	m := &SessionMutation{
		config:        c,
		op:            op,
		typ:           TypeSession,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSessionID sets the ID field of the mutation.
func withSessionID(id int32) sessionOption {
	return func(m *SessionMutation) {
		var (
			err   error
			once  sync.Once
			value *Session
		)
		m.oldValue = func(ctx context.Context) (*Session, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Session.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSession sets the old Session of the mutation.
func withSession(node *Session) sessionOption {
	return func(m *SessionMutation) {
		m.oldValue = func(context.Context) (*Session, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SessionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SessionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Session entities.
func (m *SessionMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SessionMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SessionMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Session.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreated sets the "created" field.
func (m *SessionMutation) SetCreated(t time.Time) {
	m.created = &t
}

// Created returns the value of the "created" field in the mutation.
func (m *SessionMutation) Created() (r time.Time, exists bool) {
	v := m.created
	if v == nil {
		return
	}
	return *v, true
}

// OldCreated returns the old "created" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldCreated(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreated: %w", err)
	}
	return oldValue.Created, nil
}

// ResetCreated resets all changes to the "created" field.
func (m *SessionMutation) ResetCreated() {
	m.created = nil
}

// SetUpdated sets the "updated" field.
func (m *SessionMutation) SetUpdated(t time.Time) {
	m.updated = &t
}

// Updated returns the value of the "updated" field in the mutation.
func (m *SessionMutation) Updated() (r time.Time, exists bool) {
	v := m.updated
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdated returns the old "updated" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldUpdated(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdated: %w", err)
	}
	return oldValue.Updated, nil
}

// ResetUpdated resets all changes to the "updated" field.
func (m *SessionMutation) ResetUpdated() {
	m.updated = nil
}

// SetUserID sets the "user_id" field.
func (m *SessionMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *SessionMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *SessionMutation) ResetUserID() {
	m.user_id = nil
}

// SetPeerID sets the "peer_id" field.
func (m *SessionMutation) SetPeerID(s string) {
	m.peer_id = &s
}

// PeerID returns the value of the "peer_id" field in the mutation.
func (m *SessionMutation) PeerID() (r string, exists bool) {
	v := m.peer_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPeerID returns the old "peer_id" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldPeerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPeerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPeerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPeerID: %w", err)
	}
	return oldValue.PeerID, nil
}

// ResetPeerID resets all changes to the "peer_id" field.
func (m *SessionMutation) ResetPeerID() {
	m.peer_id = nil
}

// SetSessionType sets the "session_type" field.
func (m *SessionMutation) SetSessionType(i int8) {
	m.session_type = &i
	m.addsession_type = nil
}

// SessionType returns the value of the "session_type" field in the mutation.
func (m *SessionMutation) SessionType() (r int8, exists bool) {
	v := m.session_type
	if v == nil {
		return
	}
	return *v, true
}

// OldSessionType returns the old "session_type" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldSessionType(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSessionType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSessionType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessionType: %w", err)
	}
	return oldValue.SessionType, nil
}

// AddSessionType adds i to the "session_type" field.
func (m *SessionMutation) AddSessionType(i int8) {
	if m.addsession_type != nil {
		*m.addsession_type += i
	} else {
		m.addsession_type = &i
	}
}

// AddedSessionType returns the value that was added to the "session_type" field in this mutation.
func (m *SessionMutation) AddedSessionType() (r int8, exists bool) {
	v := m.addsession_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetSessionType resets all changes to the "session_type" field.
func (m *SessionMutation) ResetSessionType() {
	m.session_type = nil
	m.addsession_type = nil
}

// SetSessionStatus sets the "session_status" field.
func (m *SessionMutation) SetSessionStatus(i int8) {
	m.session_status = &i
	m.addsession_status = nil
}

// SessionStatus returns the value of the "session_status" field in the mutation.
func (m *SessionMutation) SessionStatus() (r int8, exists bool) {
	v := m.session_status
	if v == nil {
		return
	}
	return *v, true
}

// OldSessionStatus returns the old "session_status" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldSessionStatus(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSessionStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSessionStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessionStatus: %w", err)
	}
	return oldValue.SessionStatus, nil
}

// AddSessionStatus adds i to the "session_status" field.
func (m *SessionMutation) AddSessionStatus(i int8) {
	if m.addsession_status != nil {
		*m.addsession_status += i
	} else {
		m.addsession_status = &i
	}
}

// AddedSessionStatus returns the value that was added to the "session_status" field in this mutation.
func (m *SessionMutation) AddedSessionStatus() (r int8, exists bool) {
	v := m.addsession_status
	if v == nil {
		return
	}
	return *v, true
}

// ResetSessionStatus resets all changes to the "session_status" field.
func (m *SessionMutation) ResetSessionStatus() {
	m.session_status = nil
	m.addsession_status = nil
}

// Where appends a list predicates to the SessionMutation builder.
func (m *SessionMutation) Where(ps ...predicate.Session) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SessionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Session).
func (m *SessionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SessionMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created != nil {
		fields = append(fields, session.FieldCreated)
	}
	if m.updated != nil {
		fields = append(fields, session.FieldUpdated)
	}
	if m.user_id != nil {
		fields = append(fields, session.FieldUserID)
	}
	if m.peer_id != nil {
		fields = append(fields, session.FieldPeerID)
	}
	if m.session_type != nil {
		fields = append(fields, session.FieldSessionType)
	}
	if m.session_status != nil {
		fields = append(fields, session.FieldSessionStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SessionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case session.FieldCreated:
		return m.Created()
	case session.FieldUpdated:
		return m.Updated()
	case session.FieldUserID:
		return m.UserID()
	case session.FieldPeerID:
		return m.PeerID()
	case session.FieldSessionType:
		return m.SessionType()
	case session.FieldSessionStatus:
		return m.SessionStatus()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SessionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case session.FieldCreated:
		return m.OldCreated(ctx)
	case session.FieldUpdated:
		return m.OldUpdated(ctx)
	case session.FieldUserID:
		return m.OldUserID(ctx)
	case session.FieldPeerID:
		return m.OldPeerID(ctx)
	case session.FieldSessionType:
		return m.OldSessionType(ctx)
	case session.FieldSessionStatus:
		return m.OldSessionStatus(ctx)
	}
	return nil, fmt.Errorf("unknown Session field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case session.FieldCreated:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreated(v)
		return nil
	case session.FieldUpdated:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdated(v)
		return nil
	case session.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case session.FieldPeerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPeerID(v)
		return nil
	case session.FieldSessionType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionType(v)
		return nil
	case session.FieldSessionStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SessionMutation) AddedFields() []string {
	var fields []string
	if m.addsession_type != nil {
		fields = append(fields, session.FieldSessionType)
	}
	if m.addsession_status != nil {
		fields = append(fields, session.FieldSessionStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SessionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case session.FieldSessionType:
		return m.AddedSessionType()
	case session.FieldSessionStatus:
		return m.AddedSessionStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case session.FieldSessionType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSessionType(v)
		return nil
	case session.FieldSessionStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSessionStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Session numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SessionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SessionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SessionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Session nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SessionMutation) ResetField(name string) error {
	switch name {
	case session.FieldCreated:
		m.ResetCreated()
		return nil
	case session.FieldUpdated:
		m.ResetUpdated()
		return nil
	case session.FieldUserID:
		m.ResetUserID()
		return nil
	case session.FieldPeerID:
		m.ResetPeerID()
		return nil
	case session.FieldSessionType:
		m.ResetSessionType()
		return nil
	case session.FieldSessionStatus:
		m.ResetSessionStatus()
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SessionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SessionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SessionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SessionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SessionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SessionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SessionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Session unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SessionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Session edge %s", name)
}
