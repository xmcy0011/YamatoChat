// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: rpc/chat/api/chat/chat.proto

package chat

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 消息已读回复请求（我方）
type MsgReadAckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      uint64        `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 消息发送方
	MsgSeq      uint64        `protobuf:"varint,2,opt,name=msg_seq,json=msgSeq,proto3" json:"msg_seq,omitempty"` // 服务器消息ID，在该ID之前的所有消息被标记为已读
	SessionId   uint64        `protobuf:"varint,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	SessionType IMSessionType `protobuf:"varint,4,opt,name=session_type,json=sessionType,proto3,enum=chat.IMSessionType" json:"session_type,omitempty"`
}

func (x *MsgReadAckRequest) Reset() {
	*x = MsgReadAckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgReadAckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgReadAckRequest) ProtoMessage() {}

func (x *MsgReadAckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgReadAckRequest.ProtoReflect.Descriptor instead.
func (*MsgReadAckRequest) Descriptor() ([]byte, []int) {
	return file_rpc_chat_api_chat_chat_proto_rawDescGZIP(), []int{0}
}

func (x *MsgReadAckRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MsgReadAckRequest) GetMsgSeq() uint64 {
	if x != nil {
		return x.MsgSeq
	}
	return 0
}

func (x *MsgReadAckRequest) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *MsgReadAckRequest) GetSessionType() IMSessionType {
	if x != nil {
		return x.SessionType
	}
	return IMSessionType_kCIM_SESSION_TYPE_Invalid
}

// 消息已读回复响应
type MsgReadAckReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnreadCount uint32 `protobuf:"varint,1,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"` // 已读消息数量
}

func (x *MsgReadAckReply) Reset() {
	*x = MsgReadAckReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgReadAckReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgReadAckReply) ProtoMessage() {}

func (x *MsgReadAckReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgReadAckReply.ProtoReflect.Descriptor instead.
func (*MsgReadAckReply) Descriptor() ([]byte, []int) {
	return file_rpc_chat_api_chat_chat_proto_rawDescGZIP(), []int{1}
}

func (x *MsgReadAckReply) GetUnreadCount() uint32 {
	if x != nil {
		return x.UnreadCount
	}
	return 0
}

// 最近聊天会话列表请求
type GetRecentSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	LatestUpdateTime uint32 `protobuf:"varint,2,opt,name=latest_update_time,json=latestUpdateTime,proto3" json:"latest_update_time,omitempty"` // 最后更新时间
}

func (x *GetRecentSessionRequest) Reset() {
	*x = GetRecentSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecentSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecentSessionRequest) ProtoMessage() {}

func (x *GetRecentSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecentSessionRequest.ProtoReflect.Descriptor instead.
func (*GetRecentSessionRequest) Descriptor() ([]byte, []int) {
	return file_rpc_chat_api_chat_chat_proto_rawDescGZIP(), []int{2}
}

func (x *GetRecentSessionRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetRecentSessionRequest) GetLatestUpdateTime() uint32 {
	if x != nil {
		return x.LatestUpdateTime
	}
	return 0
}

// 会话信息
type IMContactSessionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId     uint64              `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                                           // 会话id
	SessionType   IMSessionType       `protobuf:"varint,2,opt,name=session_type,json=sessionType,proto3,enum=chat.IMSessionType" json:"session_type,omitempty"`             // 会话类型
	SessionStatus IMSessionStatusType `protobuf:"varint,3,opt,name=session_status,json=sessionStatus,proto3,enum=chat.IMSessionStatusType" json:"session_status,omitempty"` // 会话修改命令，预留
	UnreadCnt     uint32              `protobuf:"varint,4,opt,name=unread_cnt,json=unreadCnt,proto3" json:"unread_cnt,omitempty"`                                           // 该会话未读消息数量
	UpdatedTime   uint32              `protobuf:"varint,5,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`                                     // 更新时间
	LatestMsgId   string              `protobuf:"bytes,6,opt,name=latest_msg_id,json=latestMsgId,proto3" json:"latest_msg_id,omitempty"`                                    // 最新一条消息的id（UUID）
	LatestMsgSeq  uint64              `protobuf:"varint,7,opt,name=latest_msg_seq,json=latestMsgSeq,proto3" json:"latest_msg_seq,omitempty"`                                // 最新一条消息服务端的id（顺序递增）
	MsgTimeStamp  uint32              `protobuf:"varint,8,opt,name=msg_time_stamp,json=msgTimeStamp,proto3" json:"msg_time_stamp,omitempty"`                                // 最新一条消息时间戳（毫秒）
	MsgData       []byte              `protobuf:"bytes,9,opt,name=msg_data,json=msgData,proto3" json:"msg_data,omitempty"`                                                  // 最新一条消息的内容
	MsgType       IMMsgType           `protobuf:"varint,10,opt,name=msg_type,json=msgType,proto3,enum=chat.IMMsgType" json:"msg_type,omitempty"`                            // 最新一条消息的类型
	MsgFromUserId uint64              `protobuf:"varint,11,opt,name=msg_from_user_id,json=msgFromUserId,proto3" json:"msg_from_user_id,omitempty"`                          // 最新一条消息的发送者
	MsgStatus     CIMMsgStatus        `protobuf:"varint,12,opt,name=msg_status,json=msgStatus,proto3,enum=chat.CIMMsgStatus" json:"msg_status,omitempty"`                   // 最新一条消息的状态（预留）
}

func (x *IMContactSessionInfo) Reset() {
	*x = IMContactSessionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMContactSessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMContactSessionInfo) ProtoMessage() {}

func (x *IMContactSessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMContactSessionInfo.ProtoReflect.Descriptor instead.
func (*IMContactSessionInfo) Descriptor() ([]byte, []int) {
	return file_rpc_chat_api_chat_chat_proto_rawDescGZIP(), []int{3}
}

func (x *IMContactSessionInfo) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *IMContactSessionInfo) GetSessionType() IMSessionType {
	if x != nil {
		return x.SessionType
	}
	return IMSessionType_kCIM_SESSION_TYPE_Invalid
}

func (x *IMContactSessionInfo) GetSessionStatus() IMSessionStatusType {
	if x != nil {
		return x.SessionStatus
	}
	return IMSessionStatusType_kCIM_SESSION_STATUS_UNKNOWN
}

func (x *IMContactSessionInfo) GetUnreadCnt() uint32 {
	if x != nil {
		return x.UnreadCnt
	}
	return 0
}

func (x *IMContactSessionInfo) GetUpdatedTime() uint32 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

func (x *IMContactSessionInfo) GetLatestMsgId() string {
	if x != nil {
		return x.LatestMsgId
	}
	return ""
}

func (x *IMContactSessionInfo) GetLatestMsgSeq() uint64 {
	if x != nil {
		return x.LatestMsgSeq
	}
	return 0
}

func (x *IMContactSessionInfo) GetMsgTimeStamp() uint32 {
	if x != nil {
		return x.MsgTimeStamp
	}
	return 0
}

func (x *IMContactSessionInfo) GetMsgData() []byte {
	if x != nil {
		return x.MsgData
	}
	return nil
}

func (x *IMContactSessionInfo) GetMsgType() IMMsgType {
	if x != nil {
		return x.MsgType
	}
	return IMMsgType_kCIM_MSG_TYPE_UNKNOWN
}

func (x *IMContactSessionInfo) GetMsgFromUserId() uint64 {
	if x != nil {
		return x.MsgFromUserId
	}
	return 0
}

func (x *IMContactSessionInfo) GetMsgStatus() CIMMsgStatus {
	if x != nil {
		return x.MsgStatus
	}
	return CIMMsgStatus_kCIM_MSG_STATUS_NONE
}

type GetRecentSessionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId             uint64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UnreadCounts       uint32                  `protobuf:"varint,2,opt,name=unread_counts,json=unreadCounts,proto3" json:"unread_counts,omitempty"`                    // 总未读数量
	ContactSessionList []*IMContactSessionInfo `protobuf:"bytes,3,rep,name=contact_session_list,json=contactSessionList,proto3" json:"contact_session_list,omitempty"` // 会话列表
}

func (x *GetRecentSessionReply) Reset() {
	*x = GetRecentSessionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecentSessionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecentSessionReply) ProtoMessage() {}

func (x *GetRecentSessionReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecentSessionReply.ProtoReflect.Descriptor instead.
func (*GetRecentSessionReply) Descriptor() ([]byte, []int) {
	return file_rpc_chat_api_chat_chat_proto_rawDescGZIP(), []int{4}
}

func (x *GetRecentSessionReply) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetRecentSessionReply) GetUnreadCounts() uint32 {
	if x != nil {
		return x.UnreadCounts
	}
	return 0
}

func (x *GetRecentSessionReply) GetContactSessionList() []*IMContactSessionInfo {
	if x != nil {
		return x.ContactSessionList
	}
	return nil
}

// 查询历史聊天消息请求（漫游，任意时间，任意位置）
type GetMsgListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      uint64                          `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionType IMSessionType                   `protobuf:"varint,2,opt,name=session_type,json=sessionType,proto3,enum=chat.IMSessionType" json:"session_type,omitempty"`
	SessionId   uint64                          `protobuf:"varint,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	TimeSpan    *GetMsgListRequest_GetMsgByTime `protobuf:"bytes,4,opt,name=time_span,json=timeSpan,proto3" json:"time_span,omitempty"`        // 时间范围，不设置代表不限
	Filter      *GetMsgListRequest_GetMsgBySeq  `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`                            // 扫描条件
	LimitCount  uint32                          `protobuf:"varint,6,opt,name=limit_count,json=limitCount,proto3" json:"limit_count,omitempty"` // 本次查询消息的条数上线(最多100条)
}

func (x *GetMsgListRequest) Reset() {
	*x = GetMsgListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMsgListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMsgListRequest) ProtoMessage() {}

func (x *GetMsgListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMsgListRequest.ProtoReflect.Descriptor instead.
func (*GetMsgListRequest) Descriptor() ([]byte, []int) {
	return file_rpc_chat_api_chat_chat_proto_rawDescGZIP(), []int{5}
}

func (x *GetMsgListRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetMsgListRequest) GetSessionType() IMSessionType {
	if x != nil {
		return x.SessionType
	}
	return IMSessionType_kCIM_SESSION_TYPE_Invalid
}

func (x *GetMsgListRequest) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *GetMsgListRequest) GetTimeSpan() *GetMsgListRequest_GetMsgByTime {
	if x != nil {
		return x.TimeSpan
	}
	return nil
}

func (x *GetMsgListRequest) GetFilter() *GetMsgListRequest_GetMsgBySeq {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetMsgListRequest) GetLimitCount() uint32 {
	if x != nil {
		return x.LimitCount
	}
	return 0
}

// 消息信息
type IMMsgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientMsgId  string        `protobuf:"bytes,1,opt,name=client_msg_id,json=clientMsgId,proto3" json:"client_msg_id,omitempty"`                        // 消息ID（UUID，客户端生成），去重
	ServerMsgSeq uint64        `protobuf:"varint,2,opt,name=server_msg_seq,json=serverMsgSeq,proto3" json:"server_msg_seq,omitempty"`                    // 递增消息序号（服务端生成），乱序处理
	MsgResCode   IMResCode     `protobuf:"varint,3,opt,name=msg_res_code,json=msgResCode,proto3,enum=chat.IMResCode" json:"msg_res_code,omitempty"`      // 消息错误码
	MsgFeature   IMMsgFeature  `protobuf:"varint,4,opt,name=msg_feature,json=msgFeature,proto3,enum=chat.IMMsgFeature" json:"msg_feature,omitempty"`     // 消息属性
	SessionType  IMSessionType `protobuf:"varint,5,opt,name=session_type,json=sessionType,proto3,enum=chat.IMSessionType" json:"session_type,omitempty"` // 会话类型
	FromUserId   uint64        `protobuf:"varint,6,opt,name=from_user_id,json=fromUserId,proto3" json:"from_user_id,omitempty"`                          // 来源会话ID
	To           uint64        `protobuf:"varint,7,opt,name=to,proto3" json:"to,omitempty"`                                                              // 目标ID，单聊userId，群聊groupId
	CreateTime   uint32        `protobuf:"varint,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                            // 消息创建时间戳（毫秒）
	MsgType      IMMsgType     `protobuf:"varint,9,opt,name=msg_type,json=msgType,proto3,enum=chat.IMMsgType" json:"msg_type,omitempty"`                 // 消息类型
	MsgStatus    CIMMsgStatus  `protobuf:"varint,10,opt,name=msg_status,json=msgStatus,proto3,enum=chat.CIMMsgStatus" json:"msg_status,omitempty"`       // 消息状态（预留）
	MsgData      []byte        `protobuf:"bytes,11,opt,name=msg_data,json=msgData,proto3" json:"msg_data,omitempty"`                                     // 消息内容
}

func (x *IMMsgInfo) Reset() {
	*x = IMMsgInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMsgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMsgInfo) ProtoMessage() {}

func (x *IMMsgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMsgInfo.ProtoReflect.Descriptor instead.
func (*IMMsgInfo) Descriptor() ([]byte, []int) {
	return file_rpc_chat_api_chat_chat_proto_rawDescGZIP(), []int{6}
}

func (x *IMMsgInfo) GetClientMsgId() string {
	if x != nil {
		return x.ClientMsgId
	}
	return ""
}

func (x *IMMsgInfo) GetServerMsgSeq() uint64 {
	if x != nil {
		return x.ServerMsgSeq
	}
	return 0
}

func (x *IMMsgInfo) GetMsgResCode() IMResCode {
	if x != nil {
		return x.MsgResCode
	}
	return IMResCode_kCIM_RES_CODE_UNKNOWN
}

func (x *IMMsgInfo) GetMsgFeature() IMMsgFeature {
	if x != nil {
		return x.MsgFeature
	}
	return IMMsgFeature_kCIM_MSG_FEATURE_DEFAULT
}

func (x *IMMsgInfo) GetSessionType() IMSessionType {
	if x != nil {
		return x.SessionType
	}
	return IMSessionType_kCIM_SESSION_TYPE_Invalid
}

func (x *IMMsgInfo) GetFromUserId() uint64 {
	if x != nil {
		return x.FromUserId
	}
	return 0
}

func (x *IMMsgInfo) GetTo() uint64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *IMMsgInfo) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *IMMsgInfo) GetMsgType() IMMsgType {
	if x != nil {
		return x.MsgType
	}
	return IMMsgType_kCIM_MSG_TYPE_UNKNOWN
}

func (x *IMMsgInfo) GetMsgStatus() CIMMsgStatus {
	if x != nil {
		return x.MsgStatus
	}
	return CIMMsgStatus_kCIM_MSG_STATUS_NONE
}

func (x *IMMsgInfo) GetMsgData() []byte {
	if x != nil {
		return x.MsgData
	}
	return nil
}

//对于群而言，如果消息数目返回的数值小于请求的cnt,则表示群的消息能拉取的到头了，更早的消息没有权限拉取。
//如果limit_count 和 msg_list.count 不一致，说明服务器消息有缺失，需要
//客户端做一个缺失标记，避免下次再次拉取。
type GetMsgListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndMsgSeq uint64       `protobuf:"varint,1,opt,name=end_msg_seq,json=endMsgSeq,proto3" json:"end_msg_seq,omitempty"` // 结束消息序号(不包含在查询结果中)
	MsgList   []*IMMsgInfo `protobuf:"bytes,2,rep,name=msg_list,json=msgList,proto3" json:"msg_list,omitempty"`          // 消息列表
}

func (x *GetMsgListReply) Reset() {
	*x = GetMsgListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMsgListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMsgListReply) ProtoMessage() {}

func (x *GetMsgListReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMsgListReply.ProtoReflect.Descriptor instead.
func (*GetMsgListReply) Descriptor() ([]byte, []int) {
	return file_rpc_chat_api_chat_chat_proto_rawDescGZIP(), []int{7}
}

func (x *GetMsgListReply) GetEndMsgSeq() uint64 {
	if x != nil {
		return x.EndMsgSeq
	}
	return 0
}

func (x *GetMsgListReply) GetMsgList() []*IMMsgInfo {
	if x != nil {
		return x.MsgList
	}
	return nil
}

type IMMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From         uint64    `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`                                          // 消息发送方
	To           string    `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`                                               // 消息接受方，单聊用户ID，群聊群ID
	ClientMsgId  string    `protobuf:"bytes,3,opt,name=client_msg_id,json=clientMsgId,proto3" json:"client_msg_id,omitempty"`        // 客户端消息ID，唯一（UUID）
	ServerMsgSeq uint64    `protobuf:"varint,4,opt,name=server_msg_seq,json=serverMsgSeq,proto3" json:"server_msg_seq,omitempty"`    // 服务端生成的消息ID，顺序（客户端发送时无需设置）
	CreateTime   int32     `protobuf:"varint,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`            // 消息创建时间戳(秒)
	MsgType      IMMsgType `protobuf:"varint,6,opt,name=msg_type,json=msgType,proto3,enum=chat.IMMsgType" json:"msg_type,omitempty"` // 消息类型
	MsgData      []byte    `protobuf:"bytes,7,opt,name=msg_data,json=msgData,proto3" json:"msg_data,omitempty"`                      // 消息内容
}

func (x *IMMessage) Reset() {
	*x = IMMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMessage) ProtoMessage() {}

func (x *IMMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMessage.ProtoReflect.Descriptor instead.
func (*IMMessage) Descriptor() ([]byte, []int) {
	return file_rpc_chat_api_chat_chat_proto_rawDescGZIP(), []int{8}
}

func (x *IMMessage) GetFrom() uint64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *IMMessage) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *IMMessage) GetClientMsgId() string {
	if x != nil {
		return x.ClientMsgId
	}
	return ""
}

func (x *IMMessage) GetServerMsgSeq() uint64 {
	if x != nil {
		return x.ServerMsgSeq
	}
	return 0
}

func (x *IMMessage) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *IMMessage) GetMsgType() IMMsgType {
	if x != nil {
		return x.MsgType
	}
	return IMMsgType_kCIM_MSG_TYPE_UNKNOWN
}

func (x *IMMessage) GetMsgData() []byte {
	if x != nil {
		return x.MsgData
	}
	return nil
}

// 发送消息请求
type SendMsgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUserId  uint64    `protobuf:"varint,1,opt,name=from_user_id,json=fromUserId,proto3" json:"from_user_id,omitempty"`          // 消息发送方
	To          string    `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`                                               // 消息接受方，单聊用户ID，群聊群ID
	ClientMsgId string    `protobuf:"bytes,3,opt,name=client_msg_id,json=clientMsgId,proto3" json:"client_msg_id,omitempty"`        // 客户端消息ID，唯一（UUID）
	CreateTime  int32     `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`            // 消息创建时间戳(秒)
	MsgType     IMMsgType `protobuf:"varint,5,opt,name=msg_type,json=msgType,proto3,enum=chat.IMMsgType" json:"msg_type,omitempty"` // 消息类型
	MsgData     []byte    `protobuf:"bytes,6,opt,name=msg_data,json=msgData,proto3" json:"msg_data,omitempty"`                      // 消息内容
}

func (x *SendMsgRequest) Reset() {
	*x = SendMsgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMsgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMsgRequest) ProtoMessage() {}

func (x *SendMsgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMsgRequest.ProtoReflect.Descriptor instead.
func (*SendMsgRequest) Descriptor() ([]byte, []int) {
	return file_rpc_chat_api_chat_chat_proto_rawDescGZIP(), []int{9}
}

func (x *SendMsgRequest) GetFromUserId() uint64 {
	if x != nil {
		return x.FromUserId
	}
	return 0
}

func (x *SendMsgRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *SendMsgRequest) GetClientMsgId() string {
	if x != nil {
		return x.ClientMsgId
	}
	return ""
}

func (x *SendMsgRequest) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *SendMsgRequest) GetMsgType() IMMsgType {
	if x != nil {
		return x.MsgType
	}
	return IMMsgType_kCIM_MSG_TYPE_UNKNOWN
}

func (x *SendMsgRequest) GetMsgData() []byte {
	if x != nil {
		return x.MsgData
	}
	return nil
}

// 发送消息响应
type SendMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgSeq  uint64    `protobuf:"varint,1,opt,name=msg_seq,json=msgSeq,proto3" json:"msg_seq,omitempty"`                        // 服务端生成的递增消息序号，乱序处理
	ResCode IMResCode `protobuf:"varint,2,opt,name=res_code,json=resCode,proto3,enum=chat.IMResCode" json:"res_code,omitempty"` // 消息状态码
}

func (x *SendMsgReply) Reset() {
	*x = SendMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMsgReply) ProtoMessage() {}

func (x *SendMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMsgReply.ProtoReflect.Descriptor instead.
func (*SendMsgReply) Descriptor() ([]byte, []int) {
	return file_rpc_chat_api_chat_chat_proto_rawDescGZIP(), []int{10}
}

func (x *SendMsgReply) GetMsgSeq() uint64 {
	if x != nil {
		return x.MsgSeq
	}
	return 0
}

func (x *SendMsgReply) GetResCode() IMResCode {
	if x != nil {
		return x.ResCode
	}
	return IMResCode_kCIM_RES_CODE_UNKNOWN
}

// 同步消息请求
type SyncMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member   string `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	LastRead int64  `protobuf:"varint,2,opt,name=last_read,json=lastRead,proto3" json:"last_read,omitempty"`
	Count    int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *SyncMessageRequest) Reset() {
	*x = SyncMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncMessageRequest) ProtoMessage() {}

func (x *SyncMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncMessageRequest.ProtoReflect.Descriptor instead.
func (*SyncMessageRequest) Descriptor() ([]byte, []int) {
	return file_rpc_chat_api_chat_chat_proto_rawDescGZIP(), []int{11}
}

func (x *SyncMessageRequest) GetMember() string {
	if x != nil {
		return x.Member
	}
	return ""
}

func (x *SyncMessageRequest) GetLastRead() int64 {
	if x != nil {
		return x.LastRead
	}
	return 0
}

func (x *SyncMessageRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type TimelineEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence int64        `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Message  []*IMMessage `protobuf:"bytes,2,rep,name=message,proto3" json:"message,omitempty"`
}

func (x *TimelineEntry) Reset() {
	*x = TimelineEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimelineEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimelineEntry) ProtoMessage() {}

func (x *TimelineEntry) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimelineEntry.ProtoReflect.Descriptor instead.
func (*TimelineEntry) Descriptor() ([]byte, []int) {
	return file_rpc_chat_api_chat_chat_proto_rawDescGZIP(), []int{12}
}

func (x *TimelineEntry) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *TimelineEntry) GetMessage() []*IMMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

// 同步消息响应
type SyncMessageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 最新的消息序号
	LatestSeq int64 `protobuf:"varint,1,opt,name=latest_seq,json=latestSeq,proto3" json:"latest_seq,omitempty"`
	// entry_set 中最后的序号值
	EntrySetLastSeq int64 `protobuf:"varint,2,opt,name=entry_set_last_seq,json=entrySetLastSeq,proto3" json:"entry_set_last_seq,omitempty"`
	// 如果拉取到的结果为空，说明同步完成
	EntrySet []*TimelineEntry `protobuf:"bytes,3,rep,name=entry_set,json=entrySet,proto3" json:"entry_set,omitempty"`
}

func (x *SyncMessageReply) Reset() {
	*x = SyncMessageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncMessageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncMessageReply) ProtoMessage() {}

func (x *SyncMessageReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncMessageReply.ProtoReflect.Descriptor instead.
func (*SyncMessageReply) Descriptor() ([]byte, []int) {
	return file_rpc_chat_api_chat_chat_proto_rawDescGZIP(), []int{13}
}

func (x *SyncMessageReply) GetLatestSeq() int64 {
	if x != nil {
		return x.LatestSeq
	}
	return 0
}

func (x *SyncMessageReply) GetEntrySetLastSeq() int64 {
	if x != nil {
		return x.EntrySetLastSeq
	}
	return 0
}

func (x *SyncMessageReply) GetEntrySet() []*TimelineEntry {
	if x != nil {
		return x.EntrySet
	}
	return nil
}

type GetMsgListRequest_GetMsgByTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromTimeStamp uint64 `protobuf:"varint,1,opt,name=from_time_stamp,json=fromTimeStamp,proto3" json:"from_time_stamp,omitempty"` // 起始时间点，单位：毫秒
	EndTimeStamp  uint64 `protobuf:"varint,2,opt,name=end_time_stamp,json=endTimeStamp,proto3" json:"end_time_stamp,omitempty"`    // 结束时间点，单位：毫秒
}

func (x *GetMsgListRequest_GetMsgByTime) Reset() {
	*x = GetMsgListRequest_GetMsgByTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMsgListRequest_GetMsgByTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMsgListRequest_GetMsgByTime) ProtoMessage() {}

func (x *GetMsgListRequest_GetMsgByTime) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMsgListRequest_GetMsgByTime.ProtoReflect.Descriptor instead.
func (*GetMsgListRequest_GetMsgByTime) Descriptor() ([]byte, []int) {
	return file_rpc_chat_api_chat_chat_proto_rawDescGZIP(), []int{5, 0}
}

func (x *GetMsgListRequest_GetMsgByTime) GetFromTimeStamp() uint64 {
	if x != nil {
		return x.FromTimeStamp
	}
	return 0
}

func (x *GetMsgListRequest_GetMsgByTime) GetEndTimeStamp() uint64 {
	if x != nil {
		return x.EndTimeStamp
	}
	return 0
}

type GetMsgListRequest_GetMsgBySeq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgSeq uint64 `protobuf:"varint,1,opt,name=msg_seq,json=msgSeq,proto3" json:"msg_seq,omitempty"` // 起始或结束的消息序号(不包含在查询结果中)
	// 扫描方向
	// true: 向前扫描（类似微信），msg_seq代表结束消息序号
	// false: 向后扫描，msg_seq代表起始消息序号
	IsForward bool `protobuf:"varint,2,opt,name=is_forward,json=isForward,proto3" json:"is_forward,omitempty"`
}

func (x *GetMsgListRequest_GetMsgBySeq) Reset() {
	*x = GetMsgListRequest_GetMsgBySeq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMsgListRequest_GetMsgBySeq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMsgListRequest_GetMsgBySeq) ProtoMessage() {}

func (x *GetMsgListRequest_GetMsgBySeq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_chat_api_chat_chat_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMsgListRequest_GetMsgBySeq.ProtoReflect.Descriptor instead.
func (*GetMsgListRequest_GetMsgBySeq) Descriptor() ([]byte, []int) {
	return file_rpc_chat_api_chat_chat_proto_rawDescGZIP(), []int{5, 1}
}

func (x *GetMsgListRequest_GetMsgBySeq) GetMsgSeq() uint64 {
	if x != nil {
		return x.MsgSeq
	}
	return 0
}

func (x *GetMsgListRequest_GetMsgBySeq) GetIsForward() bool {
	if x != nil {
		return x.IsForward
	}
	return false
}

var File_rpc_chat_api_chat_chat_proto protoreflect.FileDescriptor

var file_rpc_chat_api_chat_chat_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x68, 0x61, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04,
	0x63, 0x68, 0x61, 0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x01, 0x0a, 0x11, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x61, 0x64, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x73, 0x67,
	0x5f, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x73, 0x67, 0x53,
	0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x36, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x49,
	0x4d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x34, 0x0a, 0x0f, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x61, 0x64, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x60, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x84, 0x04, 0x0a, 0x14, 0x49, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x49, 0x4d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x49, 0x4d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x12,
	0x24, 0x0a, 0x0e, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2a, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x10,
	0x6d, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0a, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x43, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x6d,
	0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x4c, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x49, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc9,
	0x03, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x49, 0x4d, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x61,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x3b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x53, 0x65, 0x71, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x5c, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x42,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a,
	0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x1a, 0x45, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x53,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x22, 0xc2, 0x03, 0x0a, 0x09, 0x49,
	0x4d, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x53,
	0x65, 0x71, 0x12, 0x31, 0x0a, 0x0c, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x49, 0x4d, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x6d, 0x73, 0x67, 0x52, 0x65,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a,
	0x6d, 0x73, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x49, 0x4d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x74, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x49,
	0x4d, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x31, 0x0a, 0x0a, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x49, 0x4d,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x5d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65,
	0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x53,
	0x65, 0x71, 0x12, 0x2a, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x49, 0x4d, 0x4d, 0x73,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe1,
	0x01, 0x0a, 0x09, 0x49, 0x4d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f,
	0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x6d,
	0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x22, 0xce, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x72, 0x6f,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x08,
	0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x53, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x49, 0x4d, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x5f, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x56, 0x0a, 0x0d, 0x54, 0x69, 0x6d,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x49,
	0x4d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x53, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x12, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53,
	0x65, 0x71, 0x12, 0x30, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x53, 0x65, 0x74, 0x32, 0xd2, 0x02, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x74, 0x12, 0x33, 0x0a,
	0x07, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x42, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x79, 0x6e, 0x63,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x55, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3c, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3c, 0x0a, 0x0a, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x61, 0x64, 0x41, 0x63, 0x6b, 0x12, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x61, 0x64, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x61,
	0x64, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x14, 0x5a, 0x12, 0x63, 0x68, 0x61,
	0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x3b, 0x63, 0x68, 0x61, 0x74, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_chat_api_chat_chat_proto_rawDescOnce sync.Once
	file_rpc_chat_api_chat_chat_proto_rawDescData = file_rpc_chat_api_chat_chat_proto_rawDesc
)

func file_rpc_chat_api_chat_chat_proto_rawDescGZIP() []byte {
	file_rpc_chat_api_chat_chat_proto_rawDescOnce.Do(func() {
		file_rpc_chat_api_chat_chat_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_chat_api_chat_chat_proto_rawDescData)
	})
	return file_rpc_chat_api_chat_chat_proto_rawDescData
}

var file_rpc_chat_api_chat_chat_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_rpc_chat_api_chat_chat_proto_goTypes = []interface{}{
	(*MsgReadAckRequest)(nil),              // 0: chat.MsgReadAckRequest
	(*MsgReadAckReply)(nil),                // 1: chat.MsgReadAckReply
	(*GetRecentSessionRequest)(nil),        // 2: chat.GetRecentSessionRequest
	(*IMContactSessionInfo)(nil),           // 3: chat.IMContactSessionInfo
	(*GetRecentSessionReply)(nil),          // 4: chat.GetRecentSessionReply
	(*GetMsgListRequest)(nil),              // 5: chat.GetMsgListRequest
	(*IMMsgInfo)(nil),                      // 6: chat.IMMsgInfo
	(*GetMsgListReply)(nil),                // 7: chat.GetMsgListReply
	(*IMMessage)(nil),                      // 8: chat.IMMessage
	(*SendMsgRequest)(nil),                 // 9: chat.SendMsgRequest
	(*SendMsgReply)(nil),                   // 10: chat.SendMsgReply
	(*SyncMessageRequest)(nil),             // 11: chat.SyncMessageRequest
	(*TimelineEntry)(nil),                  // 12: chat.TimelineEntry
	(*SyncMessageReply)(nil),               // 13: chat.SyncMessageReply
	(*GetMsgListRequest_GetMsgByTime)(nil), // 14: chat.GetMsgListRequest.GetMsgByTime
	(*GetMsgListRequest_GetMsgBySeq)(nil),  // 15: chat.GetMsgListRequest.GetMsgBySeq
	(IMSessionType)(0),                     // 16: chat.IMSessionType
	(IMSessionStatusType)(0),               // 17: chat.IMSessionStatusType
	(IMMsgType)(0),                         // 18: chat.IMMsgType
	(CIMMsgStatus)(0),                      // 19: chat.CIMMsgStatus
	(IMResCode)(0),                         // 20: chat.IMResCode
	(IMMsgFeature)(0),                      // 21: chat.IMMsgFeature
}
var file_rpc_chat_api_chat_chat_proto_depIdxs = []int32{
	16, // 0: chat.MsgReadAckRequest.session_type:type_name -> chat.IMSessionType
	16, // 1: chat.IMContactSessionInfo.session_type:type_name -> chat.IMSessionType
	17, // 2: chat.IMContactSessionInfo.session_status:type_name -> chat.IMSessionStatusType
	18, // 3: chat.IMContactSessionInfo.msg_type:type_name -> chat.IMMsgType
	19, // 4: chat.IMContactSessionInfo.msg_status:type_name -> chat.CIMMsgStatus
	3,  // 5: chat.GetRecentSessionReply.contact_session_list:type_name -> chat.IMContactSessionInfo
	16, // 6: chat.GetMsgListRequest.session_type:type_name -> chat.IMSessionType
	14, // 7: chat.GetMsgListRequest.time_span:type_name -> chat.GetMsgListRequest.GetMsgByTime
	15, // 8: chat.GetMsgListRequest.filter:type_name -> chat.GetMsgListRequest.GetMsgBySeq
	20, // 9: chat.IMMsgInfo.msg_res_code:type_name -> chat.IMResCode
	21, // 10: chat.IMMsgInfo.msg_feature:type_name -> chat.IMMsgFeature
	16, // 11: chat.IMMsgInfo.session_type:type_name -> chat.IMSessionType
	18, // 12: chat.IMMsgInfo.msg_type:type_name -> chat.IMMsgType
	19, // 13: chat.IMMsgInfo.msg_status:type_name -> chat.CIMMsgStatus
	6,  // 14: chat.GetMsgListReply.msg_list:type_name -> chat.IMMsgInfo
	18, // 15: chat.IMMessage.msg_type:type_name -> chat.IMMsgType
	18, // 16: chat.SendMsgRequest.msg_type:type_name -> chat.IMMsgType
	20, // 17: chat.SendMsgReply.res_code:type_name -> chat.IMResCode
	8,  // 18: chat.TimelineEntry.message:type_name -> chat.IMMessage
	12, // 19: chat.SyncMessageReply.entry_set:type_name -> chat.TimelineEntry
	9,  // 20: chat.Chat.SendMsg:input_type -> chat.SendMsgRequest
	11, // 21: chat.Chat.GetSyncMessage:input_type -> chat.SyncMessageRequest
	2,  // 22: chat.Chat.GetRecentContactSession:input_type -> chat.GetRecentSessionRequest
	5,  // 23: chat.Chat.GetMsgList:input_type -> chat.GetMsgListRequest
	0,  // 24: chat.Chat.MsgReadAck:input_type -> chat.MsgReadAckRequest
	10, // 25: chat.Chat.SendMsg:output_type -> chat.SendMsgReply
	13, // 26: chat.Chat.GetSyncMessage:output_type -> chat.SyncMessageReply
	4,  // 27: chat.Chat.GetRecentContactSession:output_type -> chat.GetRecentSessionReply
	7,  // 28: chat.Chat.GetMsgList:output_type -> chat.GetMsgListReply
	1,  // 29: chat.Chat.MsgReadAck:output_type -> chat.MsgReadAckReply
	25, // [25:30] is the sub-list for method output_type
	20, // [20:25] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_rpc_chat_api_chat_chat_proto_init() }
func file_rpc_chat_api_chat_chat_proto_init() {
	if File_rpc_chat_api_chat_chat_proto != nil {
		return
	}
	file_rpc_chat_api_chat_contants_proto_init()
	file_rpc_chat_api_chat_error_reason_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_rpc_chat_api_chat_chat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgReadAckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_chat_api_chat_chat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgReadAckReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_chat_api_chat_chat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecentSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_chat_api_chat_chat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMContactSessionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_chat_api_chat_chat_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecentSessionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_chat_api_chat_chat_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMsgListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_chat_api_chat_chat_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMsgInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_chat_api_chat_chat_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMsgListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_chat_api_chat_chat_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_chat_api_chat_chat_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMsgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_chat_api_chat_chat_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_chat_api_chat_chat_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_chat_api_chat_chat_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimelineEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_chat_api_chat_chat_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncMessageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_chat_api_chat_chat_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMsgListRequest_GetMsgByTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_chat_api_chat_chat_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMsgListRequest_GetMsgBySeq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_chat_api_chat_chat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_chat_api_chat_chat_proto_goTypes,
		DependencyIndexes: file_rpc_chat_api_chat_chat_proto_depIdxs,
		MessageInfos:      file_rpc_chat_api_chat_chat_proto_msgTypes,
	}.Build()
	File_rpc_chat_api_chat_chat_proto = out.File
	file_rpc_chat_api_chat_chat_proto_rawDesc = nil
	file_rpc_chat_api_chat_chat_proto_goTypes = nil
	file_rpc_chat_api_chat_chat_proto_depIdxs = nil
}
