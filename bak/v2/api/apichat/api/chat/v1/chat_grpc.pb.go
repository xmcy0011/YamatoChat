// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/apichat/api/chat/v1/chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	// 查询会话列表
	GetRecentContactSession(ctx context.Context, in *GetRecentSessionRequest, opts ...grpc.CallOption) (*GetRecentSessionReply, error)
	// 查询历史消息列表
	GetMsgList(ctx context.Context, in *GetMsgListRequest, opts ...grpc.CallOption) (*GetMsgListReply, error)
	// 已读消息回执
	MsgReadAck(ctx context.Context, in *MsgReadAckRequest, opts ...grpc.CallOption) (*MsgReadAckReply, error)
	// 发消息
	SendMsg(ctx context.Context, in *SendMsgRequest, opts ...grpc.CallOption) (*SendMsgReply, error)
	// timeline 同步消息（适合有本地存储能力的客户端，如APP）
	GetSyncMessage(ctx context.Context, in *SyncMessageRequest, opts ...grpc.CallOption) (*SyncMessageReply, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) GetRecentContactSession(ctx context.Context, in *GetRecentSessionRequest, opts ...grpc.CallOption) (*GetRecentSessionReply, error) {
	out := new(GetRecentSessionReply)
	err := c.cc.Invoke(ctx, "/CoffeeChat.Chat/GetRecentContactSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetMsgList(ctx context.Context, in *GetMsgListRequest, opts ...grpc.CallOption) (*GetMsgListReply, error) {
	out := new(GetMsgListReply)
	err := c.cc.Invoke(ctx, "/CoffeeChat.Chat/GetMsgList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) MsgReadAck(ctx context.Context, in *MsgReadAckRequest, opts ...grpc.CallOption) (*MsgReadAckReply, error) {
	out := new(MsgReadAckReply)
	err := c.cc.Invoke(ctx, "/CoffeeChat.Chat/MsgReadAck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SendMsg(ctx context.Context, in *SendMsgRequest, opts ...grpc.CallOption) (*SendMsgReply, error) {
	out := new(SendMsgReply)
	err := c.cc.Invoke(ctx, "/CoffeeChat.Chat/SendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetSyncMessage(ctx context.Context, in *SyncMessageRequest, opts ...grpc.CallOption) (*SyncMessageReply, error) {
	out := new(SyncMessageReply)
	err := c.cc.Invoke(ctx, "/CoffeeChat.Chat/GetSyncMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServer is the server API for Chat service.
// All implementations must embed UnimplementedChatServer
// for forward compatibility
type ChatServer interface {
	// 查询会话列表
	GetRecentContactSession(context.Context, *GetRecentSessionRequest) (*GetRecentSessionReply, error)
	// 查询历史消息列表
	GetMsgList(context.Context, *GetMsgListRequest) (*GetMsgListReply, error)
	// 已读消息回执
	MsgReadAck(context.Context, *MsgReadAckRequest) (*MsgReadAckReply, error)
	// 发消息
	SendMsg(context.Context, *SendMsgRequest) (*SendMsgReply, error)
	// timeline 同步消息（适合有本地存储能力的客户端，如APP）
	GetSyncMessage(context.Context, *SyncMessageRequest) (*SyncMessageReply, error)
	mustEmbedUnimplementedChatServer()
}

// UnimplementedChatServer must be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (UnimplementedChatServer) GetRecentContactSession(context.Context, *GetRecentSessionRequest) (*GetRecentSessionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentContactSession not implemented")
}
func (UnimplementedChatServer) GetMsgList(context.Context, *GetMsgListRequest) (*GetMsgListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMsgList not implemented")
}
func (UnimplementedChatServer) MsgReadAck(context.Context, *MsgReadAckRequest) (*MsgReadAckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgReadAck not implemented")
}
func (UnimplementedChatServer) SendMsg(context.Context, *SendMsgRequest) (*SendMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (UnimplementedChatServer) GetSyncMessage(context.Context, *SyncMessageRequest) (*SyncMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncMessage not implemented")
}
func (UnimplementedChatServer) mustEmbedUnimplementedChatServer() {}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	s.RegisterService(&Chat_ServiceDesc, srv)
}

func _Chat_GetRecentContactSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecentSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetRecentContactSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoffeeChat.Chat/GetRecentContactSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetRecentContactSession(ctx, req.(*GetRecentSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetMsgList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMsgListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetMsgList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoffeeChat.Chat/GetMsgList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetMsgList(ctx, req.(*GetMsgListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_MsgReadAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReadAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).MsgReadAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoffeeChat.Chat/MsgReadAck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).MsgReadAck(ctx, req.(*MsgReadAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoffeeChat.Chat/SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SendMsg(ctx, req.(*SendMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetSyncMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetSyncMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoffeeChat.Chat/GetSyncMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetSyncMessage(ctx, req.(*SyncMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Chat_ServiceDesc is the grpc.ServiceDesc for Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CoffeeChat.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecentContactSession",
			Handler:    _Chat_GetRecentContactSession_Handler,
		},
		{
			MethodName: "GetMsgList",
			Handler:    _Chat_GetMsgList_Handler,
		},
		{
			MethodName: "MsgReadAck",
			Handler:    _Chat_MsgReadAck_Handler,
		},
		{
			MethodName: "SendMsg",
			Handler:    _Chat_SendMsg_Handler,
		},
		{
			MethodName: "GetSyncMessage",
			Handler:    _Chat_GetSyncMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/apichat/api/chat/v1/chat.proto",
}
