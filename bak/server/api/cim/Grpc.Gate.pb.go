// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: Grpc.Gate.proto

package cim

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_Grpc_Gate_proto protoreflect.FileDescriptor

var file_Grpc_Gate_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x08, 0x43, 0x49, 0x4d, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x1a, 0x0f, 0x43, 0x49, 0x4d,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x43, 0x49,
	0x4d, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x43,
	0x49, 0x4d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x32, 0xcf, 0x02, 0x0a, 0x04, 0x47, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x50, 0x69, 0x6e,
	0x67, 0x12, 0x17, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x49,
	0x4d, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x1a, 0x17, 0x2e, 0x43, 0x49, 0x4d,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x49, 0x4d, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42,
	0x65, 0x61, 0x74, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x43, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x1a, 0x2e,
	0x43, 0x49, 0x4d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x49, 0x4d, 0x4d,
	0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0a, 0x41,
	0x63, 0x6b, 0x4d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x2e, 0x43, 0x49, 0x4d, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x41, 0x63, 0x6b, 0x1a, 0x0f, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x70,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x0f, 0x2e,
	0x43, 0x49, 0x4d, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f,
	0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x4f, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x26, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x43, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x1a,
	0x0f, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x42, 0x09, 0x48, 0x03, 0x5a, 0x05, 0x2e, 0x3b, 0x63, 0x69, 0x6d, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_Grpc_Gate_proto_goTypes = []interface{}{
	(*CIMHeartBeat)(nil),                // 0: CIM.Login.CIMHeartBeat
	(*CIMMsgData)(nil),                  // 1: CIM.Message.CIMMsgData
	(*CIMMsgDataAck)(nil),               // 2: CIM.Message.CIMMsgDataAck
	(*Empty)(nil),                       // 3: CIM.Grpc.Empty
	(*CIMGroupMemberChangedNotify)(nil), // 4: CIM.Group.CIMGroupMemberChangedNotify
}
var file_Grpc_Gate_proto_depIdxs = []int32{
	0, // 0: CIM.Grpc.Gate.Ping:input_type -> CIM.Login.CIMHeartBeat
	1, // 1: CIM.Grpc.Gate.SendMsgData:input_type -> CIM.Message.CIMMsgData
	2, // 2: CIM.Grpc.Gate.AckMsgData:input_type -> CIM.Message.CIMMsgDataAck
	3, // 3: CIM.Grpc.Gate.StopReceivePacket:input_type -> CIM.Grpc.Empty
	4, // 4: CIM.Grpc.Gate.GroupMemberChanged:input_type -> CIM.Group.CIMGroupMemberChangedNotify
	0, // 5: CIM.Grpc.Gate.Ping:output_type -> CIM.Login.CIMHeartBeat
	2, // 6: CIM.Grpc.Gate.SendMsgData:output_type -> CIM.Message.CIMMsgDataAck
	3, // 7: CIM.Grpc.Gate.AckMsgData:output_type -> CIM.Grpc.Empty
	3, // 8: CIM.Grpc.Gate.StopReceivePacket:output_type -> CIM.Grpc.Empty
	3, // 9: CIM.Grpc.Gate.GroupMemberChanged:output_type -> CIM.Grpc.Empty
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_Grpc_Gate_proto_init() }
func file_Grpc_Gate_proto_init() {
	if File_Grpc_Gate_proto != nil {
		return
	}
	file_CIM_Group_proto_init()
	file_CIM_Login_proto_init()
	file_CIM_Message_proto_init()
	file_Grpc_Def_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Grpc_Gate_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_Grpc_Gate_proto_goTypes,
		DependencyIndexes: file_Grpc_Gate_proto_depIdxs,
	}.Build()
	File_Grpc_Gate_proto = out.File
	file_Grpc_Gate_proto_rawDesc = nil
	file_Grpc_Gate_proto_goTypes = nil
	file_Grpc_Gate_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GateClient is the client API for Gate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GateClient interface {
	// ping
	Ping(ctx context.Context, in *CIMHeartBeat, opts ...grpc.CallOption) (*CIMHeartBeat, error)
	// 发消息
	SendMsgData(ctx context.Context, in *CIMMsgData, opts ...grpc.CallOption) (*CIMMsgDataAck, error)
	// 消息收到ACK
	AckMsgData(ctx context.Context, in *CIMMsgDataAck, opts ...grpc.CallOption) (*Empty, error)
	// 停止接收消息
	StopReceivePacket(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// 群成员变更通知
	GroupMemberChanged(ctx context.Context, in *CIMGroupMemberChangedNotify, opts ...grpc.CallOption) (*Empty, error)
}

type gateClient struct {
	cc grpc.ClientConnInterface
}

func NewGateClient(cc grpc.ClientConnInterface) GateClient {
	return &gateClient{cc}
}

func (c *gateClient) Ping(ctx context.Context, in *CIMHeartBeat, opts ...grpc.CallOption) (*CIMHeartBeat, error) {
	out := new(CIMHeartBeat)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Gate/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) SendMsgData(ctx context.Context, in *CIMMsgData, opts ...grpc.CallOption) (*CIMMsgDataAck, error) {
	out := new(CIMMsgDataAck)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Gate/SendMsgData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) AckMsgData(ctx context.Context, in *CIMMsgDataAck, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Gate/AckMsgData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) StopReceivePacket(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Gate/StopReceivePacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) GroupMemberChanged(ctx context.Context, in *CIMGroupMemberChangedNotify, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Gate/GroupMemberChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GateServer is the server API for Gate service.
type GateServer interface {
	// ping
	Ping(context.Context, *CIMHeartBeat) (*CIMHeartBeat, error)
	// 发消息
	SendMsgData(context.Context, *CIMMsgData) (*CIMMsgDataAck, error)
	// 消息收到ACK
	AckMsgData(context.Context, *CIMMsgDataAck) (*Empty, error)
	// 停止接收消息
	StopReceivePacket(context.Context, *Empty) (*Empty, error)
	// 群成员变更通知
	GroupMemberChanged(context.Context, *CIMGroupMemberChangedNotify) (*Empty, error)
}

// UnimplementedGateServer can be embedded to have forward compatible implementations.
type UnimplementedGateServer struct {
}

func (*UnimplementedGateServer) Ping(context.Context, *CIMHeartBeat) (*CIMHeartBeat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedGateServer) SendMsgData(context.Context, *CIMMsgData) (*CIMMsgDataAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsgData not implemented")
}
func (*UnimplementedGateServer) AckMsgData(context.Context, *CIMMsgDataAck) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckMsgData not implemented")
}
func (*UnimplementedGateServer) StopReceivePacket(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopReceivePacket not implemented")
}
func (*UnimplementedGateServer) GroupMemberChanged(context.Context, *CIMGroupMemberChangedNotify) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupMemberChanged not implemented")
}

func RegisterGateServer(s *grpc.Server, srv GateServer) {
	s.RegisterService(&_Gate_serviceDesc, srv)
}

func _Gate_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIMHeartBeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Gate/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Ping(ctx, req.(*CIMHeartBeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_SendMsgData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIMMsgData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).SendMsgData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Gate/SendMsgData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).SendMsgData(ctx, req.(*CIMMsgData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_AckMsgData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIMMsgDataAck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).AckMsgData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Gate/AckMsgData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).AckMsgData(ctx, req.(*CIMMsgDataAck))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_StopReceivePacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).StopReceivePacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Gate/StopReceivePacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).StopReceivePacket(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_GroupMemberChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIMGroupMemberChangedNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).GroupMemberChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Gate/GroupMemberChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).GroupMemberChanged(ctx, req.(*CIMGroupMemberChangedNotify))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CIM.Grpc.Gate",
	HandlerType: (*GateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Gate_Ping_Handler,
		},
		{
			MethodName: "SendMsgData",
			Handler:    _Gate_SendMsgData_Handler,
		},
		{
			MethodName: "AckMsgData",
			Handler:    _Gate_AckMsgData_Handler,
		},
		{
			MethodName: "StopReceivePacket",
			Handler:    _Gate_StopReceivePacket_Handler,
		},
		{
			MethodName: "GroupMemberChanged",
			Handler:    _Gate_GroupMemberChanged_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Grpc.Gate.proto",
}
