// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: CIM.Def.proto

package cim

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 外部消息：客户端 <-> 服务器消息定义
type CIMCmdID int32

const (
	CIMCmdID_kCIM_CID_UNKNOWN                         CIMCmdID = 0
	CIMCmdID_kCIM_CID_LOGIN_AUTH_TOKEN_REQ            CIMCmdID = 257 // 认证请求，Token方式
	CIMCmdID_kCIM_CID_LOGIN_AUTH_TOKEN_RSP            CIMCmdID = 258
	CIMCmdID_kCIM_CID_LOGIN_AUTH_LOGOUT_REQ           CIMCmdID = 259 // 登出
	CIMCmdID_kCIM_CID_LOGIN_AUTH_LOGOUT_RSP           CIMCmdID = 260
	CIMCmdID_kCIM_CID_LOGIN_HEARTBEAT                 CIMCmdID = 261 // 心跳，1分钟超时
	CIMCmdID_kCIM_CID_LOGIN_AUTH_REQ                  CIMCmdID = 263 // 认证请求，用户名+密码方式
	CIMCmdID_kCIM_CID_LOGIN_AUTH_RSP                  CIMCmdID = 264
	CIMCmdID_kCIM_CID_LIST_RECENT_CONTACT_SESSION_REQ CIMCmdID = 513 // 最近聊天会话列表请求
	CIMCmdID_kCIM_CID_LIST_RECENT_CONTACT_SESSION_RSP CIMCmdID = 514
	// kCIM_CID_LIST_UNREAD_CNT_REQ = 0x0203; // 未读消息计数列表请求
	// kCIM_CID_LIST_UNREAD_CNT_RSP = 0x0204;
	CIMCmdID_kCIM_CID_LIST_MSG_REQ                CIMCmdID = 517 // 历史离线聊天消息请求
	CIMCmdID_kCIM_CID_LIST_MSG_RSP                CIMCmdID = 518
	CIMCmdID_kCIM_CID_MSG_DATA                    CIMCmdID = 769 // 发送消息
	CIMCmdID_kCIM_CID_MSG_DATA_ACK                CIMCmdID = 770 // 消息收到回复
	CIMCmdID_kCIM_CID_MSG_READ_ACK                CIMCmdID = 771 // 消息已读回复（我方）
	CIMCmdID_kCIM_CID_MSG_READ_NOTIFY             CIMCmdID = 772 // 已读消息通知（对方）
	CIMCmdID_kCIM_CID_MSG_GET_LATEST_MSG_ID_REQ   CIMCmdID = 773 // 某个会话最新的消息ID请求
	CIMCmdID_kCIM_CID_MSG_GET_LATEST_MSG_ID_RSP   CIMCmdID = 774
	CIMCmdID_kCIM_CID_MSG_GET_BY_MSG_ID_REQ       CIMCmdID = 775 // 批量查询消息详情请求(20条内)
	CIMCmdID_kCIM_CID_MSG_GET_BY_MSG_ID_RSP       CIMCmdID = 776
	CIMCmdID_kCIM_CID_VOIP_INVITE_REQ             CIMCmdID = 1025 // 1.invite
	CIMCmdID_kCIM_CID_VOIP_INVITE_REPLY           CIMCmdID = 1026 // 2.100 Tring/180 Ringing/200 OK
	CIMCmdID_kCIM_CID_VOIP_INVITE_REPLY_ACK       CIMCmdID = 1027 // 3.200 Ok的Ack
	CIMCmdID_kCIM_CID_VOIP_HEARTBEAT              CIMCmdID = 1028 // 4.heartbeat，30秒超时
	CIMCmdID_kCIM_CID_VOIP_BYE_REQ                CIMCmdID = 1029 // 5.Bye
	CIMCmdID_kCIM_CID_VOIP_BYE_RSP                CIMCmdID = 1030 //
	CIMCmdID_kCIM_CID_VOIP_BYE_NOTIFY             CIMCmdID = 1031 // 6.Bye notify
	CIMCmdID_kCIM_CID_GROUP_CREATE_DEFAULT_REQ    CIMCmdID = 1281 // 创建默认群（类似微信的群）
	CIMCmdID_kCIM_CID_GROUP_CREATE_DEFAULT_RSP    CIMCmdID = 1282
	CIMCmdID_kCIM_CID_GROUP_DISBINGDING_REQ       CIMCmdID = 1283 // 解散群
	CIMCmdID_kCIM_CID_GROUP_DISBINGDING_RSP       CIMCmdID = 1284
	CIMCmdID_kCIM_CID_GROUP_EXIT_REQ              CIMCmdID = 1285 // 退出群
	CIMCmdID_kCIM_CID_GROUP_EXIT_RSP              CIMCmdID = 1286
	CIMCmdID_kCIM_CID_GROUP_LIST_REQ              CIMCmdID = 1287 // 查询群列表
	CIMCmdID_kCIM_CID_GROUP_LIST_RSP              CIMCmdID = 1288
	CIMCmdID_kCIM_CID_GROUP_INFO_REQ              CIMCmdID = 1289 // 查询群信息
	CIMCmdID_kCIM_CID_GROUP_INFO_RSP              CIMCmdID = 1296
	CIMCmdID_kCIM_CID_GROUP_INVITE_MEMBER_REQ     CIMCmdID = 1297 // 邀请人入群
	CIMCmdID_kCIM_CID_GROUP_INVITE_MEMBER_RSP     CIMCmdID = 1298
	CIMCmdID_kCIM_CID_GROUP_KICK_OUT_MEMBER_REQ   CIMCmdID = 1299 // 踢人
	CIMCmdID_kCIM_CID_GROUP_KICK_OUT_MEMBER_RSP   CIMCmdID = 1300
	CIMCmdID_kCIM_CID_GROUP_MEMBER_CHANGED_NOTIFY CIMCmdID = 1301 // 群成员变更通知
	CIMCmdID_kCIM_CID_GROUP_LIST_MEMBER_REQ       CIMCmdID = 1302 // 查询群成员列表
	CIMCmdID_kCIM_CID_GROUP_LIST_MEMBER_RSP       CIMCmdID = 1303
	// 查询用户列表（目前没有实现好友机制，所以便于测试，随机返回系统中注册的50个以内用户）
	CIMCmdID_kCIM_CID_FRIEND_QUERY_USER_LIST_REQ CIMCmdID = 1537
	CIMCmdID_kCIM_CID_FRIEND_QUERY_USER_LIST_RSP CIMCmdID = 1538
)

// Enum value maps for CIMCmdID.
var (
	CIMCmdID_name = map[int32]string{
		0:    "kCIM_CID_UNKNOWN",
		257:  "kCIM_CID_LOGIN_AUTH_TOKEN_REQ",
		258:  "kCIM_CID_LOGIN_AUTH_TOKEN_RSP",
		259:  "kCIM_CID_LOGIN_AUTH_LOGOUT_REQ",
		260:  "kCIM_CID_LOGIN_AUTH_LOGOUT_RSP",
		261:  "kCIM_CID_LOGIN_HEARTBEAT",
		263:  "kCIM_CID_LOGIN_AUTH_REQ",
		264:  "kCIM_CID_LOGIN_AUTH_RSP",
		513:  "kCIM_CID_LIST_RECENT_CONTACT_SESSION_REQ",
		514:  "kCIM_CID_LIST_RECENT_CONTACT_SESSION_RSP",
		517:  "kCIM_CID_LIST_MSG_REQ",
		518:  "kCIM_CID_LIST_MSG_RSP",
		769:  "kCIM_CID_MSG_DATA",
		770:  "kCIM_CID_MSG_DATA_ACK",
		771:  "kCIM_CID_MSG_READ_ACK",
		772:  "kCIM_CID_MSG_READ_NOTIFY",
		773:  "kCIM_CID_MSG_GET_LATEST_MSG_ID_REQ",
		774:  "kCIM_CID_MSG_GET_LATEST_MSG_ID_RSP",
		775:  "kCIM_CID_MSG_GET_BY_MSG_ID_REQ",
		776:  "kCIM_CID_MSG_GET_BY_MSG_ID_RSP",
		1025: "kCIM_CID_VOIP_INVITE_REQ",
		1026: "kCIM_CID_VOIP_INVITE_REPLY",
		1027: "kCIM_CID_VOIP_INVITE_REPLY_ACK",
		1028: "kCIM_CID_VOIP_HEARTBEAT",
		1029: "kCIM_CID_VOIP_BYE_REQ",
		1030: "kCIM_CID_VOIP_BYE_RSP",
		1031: "kCIM_CID_VOIP_BYE_NOTIFY",
		1281: "kCIM_CID_GROUP_CREATE_DEFAULT_REQ",
		1282: "kCIM_CID_GROUP_CREATE_DEFAULT_RSP",
		1283: "kCIM_CID_GROUP_DISBINGDING_REQ",
		1284: "kCIM_CID_GROUP_DISBINGDING_RSP",
		1285: "kCIM_CID_GROUP_EXIT_REQ",
		1286: "kCIM_CID_GROUP_EXIT_RSP",
		1287: "kCIM_CID_GROUP_LIST_REQ",
		1288: "kCIM_CID_GROUP_LIST_RSP",
		1289: "kCIM_CID_GROUP_INFO_REQ",
		1296: "kCIM_CID_GROUP_INFO_RSP",
		1297: "kCIM_CID_GROUP_INVITE_MEMBER_REQ",
		1298: "kCIM_CID_GROUP_INVITE_MEMBER_RSP",
		1299: "kCIM_CID_GROUP_KICK_OUT_MEMBER_REQ",
		1300: "kCIM_CID_GROUP_KICK_OUT_MEMBER_RSP",
		1301: "kCIM_CID_GROUP_MEMBER_CHANGED_NOTIFY",
		1302: "kCIM_CID_GROUP_LIST_MEMBER_REQ",
		1303: "kCIM_CID_GROUP_LIST_MEMBER_RSP",
		1537: "kCIM_CID_FRIEND_QUERY_USER_LIST_REQ",
		1538: "kCIM_CID_FRIEND_QUERY_USER_LIST_RSP",
	}
	CIMCmdID_value = map[string]int32{
		"kCIM_CID_UNKNOWN":                         0,
		"kCIM_CID_LOGIN_AUTH_TOKEN_REQ":            257,
		"kCIM_CID_LOGIN_AUTH_TOKEN_RSP":            258,
		"kCIM_CID_LOGIN_AUTH_LOGOUT_REQ":           259,
		"kCIM_CID_LOGIN_AUTH_LOGOUT_RSP":           260,
		"kCIM_CID_LOGIN_HEARTBEAT":                 261,
		"kCIM_CID_LOGIN_AUTH_REQ":                  263,
		"kCIM_CID_LOGIN_AUTH_RSP":                  264,
		"kCIM_CID_LIST_RECENT_CONTACT_SESSION_REQ": 513,
		"kCIM_CID_LIST_RECENT_CONTACT_SESSION_RSP": 514,
		"kCIM_CID_LIST_MSG_REQ":                    517,
		"kCIM_CID_LIST_MSG_RSP":                    518,
		"kCIM_CID_MSG_DATA":                        769,
		"kCIM_CID_MSG_DATA_ACK":                    770,
		"kCIM_CID_MSG_READ_ACK":                    771,
		"kCIM_CID_MSG_READ_NOTIFY":                 772,
		"kCIM_CID_MSG_GET_LATEST_MSG_ID_REQ":       773,
		"kCIM_CID_MSG_GET_LATEST_MSG_ID_RSP":       774,
		"kCIM_CID_MSG_GET_BY_MSG_ID_REQ":           775,
		"kCIM_CID_MSG_GET_BY_MSG_ID_RSP":           776,
		"kCIM_CID_VOIP_INVITE_REQ":                 1025,
		"kCIM_CID_VOIP_INVITE_REPLY":               1026,
		"kCIM_CID_VOIP_INVITE_REPLY_ACK":           1027,
		"kCIM_CID_VOIP_HEARTBEAT":                  1028,
		"kCIM_CID_VOIP_BYE_REQ":                    1029,
		"kCIM_CID_VOIP_BYE_RSP":                    1030,
		"kCIM_CID_VOIP_BYE_NOTIFY":                 1031,
		"kCIM_CID_GROUP_CREATE_DEFAULT_REQ":        1281,
		"kCIM_CID_GROUP_CREATE_DEFAULT_RSP":        1282,
		"kCIM_CID_GROUP_DISBINGDING_REQ":           1283,
		"kCIM_CID_GROUP_DISBINGDING_RSP":           1284,
		"kCIM_CID_GROUP_EXIT_REQ":                  1285,
		"kCIM_CID_GROUP_EXIT_RSP":                  1286,
		"kCIM_CID_GROUP_LIST_REQ":                  1287,
		"kCIM_CID_GROUP_LIST_RSP":                  1288,
		"kCIM_CID_GROUP_INFO_REQ":                  1289,
		"kCIM_CID_GROUP_INFO_RSP":                  1296,
		"kCIM_CID_GROUP_INVITE_MEMBER_REQ":         1297,
		"kCIM_CID_GROUP_INVITE_MEMBER_RSP":         1298,
		"kCIM_CID_GROUP_KICK_OUT_MEMBER_REQ":       1299,
		"kCIM_CID_GROUP_KICK_OUT_MEMBER_RSP":       1300,
		"kCIM_CID_GROUP_MEMBER_CHANGED_NOTIFY":     1301,
		"kCIM_CID_GROUP_LIST_MEMBER_REQ":           1302,
		"kCIM_CID_GROUP_LIST_MEMBER_RSP":           1303,
		"kCIM_CID_FRIEND_QUERY_USER_LIST_REQ":      1537,
		"kCIM_CID_FRIEND_QUERY_USER_LIST_RSP":      1538,
	}
)

func (x CIMCmdID) Enum() *CIMCmdID {
	p := new(CIMCmdID)
	*p = x
	return p
}

func (x CIMCmdID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CIMCmdID) Descriptor() protoreflect.EnumDescriptor {
	return file_CIM_Def_proto_enumTypes[0].Descriptor()
}

func (CIMCmdID) Type() protoreflect.EnumType {
	return &file_CIM_Def_proto_enumTypes[0]
}

func (x CIMCmdID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CIMCmdID.Descriptor instead.
func (CIMCmdID) EnumDescriptor() ([]byte, []int) {
	return file_CIM_Def_proto_rawDescGZIP(), []int{0}
}

// 内部消息：服务器 <-> 服务器消息定义
type CIMIntenralCmdID int32

const (
	CIMIntenralCmdID_kCIM_SID_UNKNOWN         CIMIntenralCmdID = 0    // 验证口令请求
	CIMIntenralCmdID_kCIM_SID_DB_VALIDATE_REQ CIMIntenralCmdID = 1793 // 验证口令请求
	CIMIntenralCmdID_kCIM_SID_DB_VALIDATE_RSP CIMIntenralCmdID = 1794 //
)

// Enum value maps for CIMIntenralCmdID.
var (
	CIMIntenralCmdID_name = map[int32]string{
		0:    "kCIM_SID_UNKNOWN",
		1793: "kCIM_SID_DB_VALIDATE_REQ",
		1794: "kCIM_SID_DB_VALIDATE_RSP",
	}
	CIMIntenralCmdID_value = map[string]int32{
		"kCIM_SID_UNKNOWN":         0,
		"kCIM_SID_DB_VALIDATE_REQ": 1793,
		"kCIM_SID_DB_VALIDATE_RSP": 1794,
	}
)

func (x CIMIntenralCmdID) Enum() *CIMIntenralCmdID {
	p := new(CIMIntenralCmdID)
	*p = x
	return p
}

func (x CIMIntenralCmdID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CIMIntenralCmdID) Descriptor() protoreflect.EnumDescriptor {
	return file_CIM_Def_proto_enumTypes[1].Descriptor()
}

func (CIMIntenralCmdID) Type() protoreflect.EnumType {
	return &file_CIM_Def_proto_enumTypes[1]
}

func (x CIMIntenralCmdID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CIMIntenralCmdID.Descriptor instead.
func (CIMIntenralCmdID) EnumDescriptor() ([]byte, []int) {
	return file_CIM_Def_proto_rawDescGZIP(), []int{1}
}

type CIMErrorCode int32

const (
	CIMErrorCode_kCIM_ERR_UNKNOWN CIMErrorCode = 0 // 未知错误
	// 通用错误码
	CIMErrorCode_kCIM_ERR_SUCCESS        CIMErrorCode = 200 // 成功
	CIMErrorCode_kCIM_ERR_INTERNAL_ERROR CIMErrorCode = 201 // 服务器内部错误
	// 账号错误码
	CIMErrorCode_kCIM_ERR_LOGIN_DB_VALIDATE_FAILED  CIMErrorCode = 2000 // 失败
	CIMErrorCode_kCIM_ERR_LOGIN_VERSION_TOO_OLD     CIMErrorCode = 2001 // 客户端版本太旧
	CIMErrorCode_kCIM_ERR_LOGIN_INVALID_USER_TOKEN  CIMErrorCode = 2002 // 非法的口令
	CIMErrorCode_kCIM_ERR_LOGIN_INVALID_USER_OR_PWD CIMErrorCode = 2003 // 用户不存在或者密码错误
	// HTTP API 错码
	CIMErrorCode_kCIM_ERROR_USER_ALREADY_EXIST     CIMErrorCode = 9000 // 用户已存在
	CIMErrorCode_kCIM_ERROR_USER_INVALID_PARAMETER CIMErrorCode = 9001 // 非法的用户信息
	CIMErrorCode_kCIM_ERROR_USER_NOT_EXIST         CIMErrorCode = 9002 // 用户不存在
)

// Enum value maps for CIMErrorCode.
var (
	CIMErrorCode_name = map[int32]string{
		0:    "kCIM_ERR_UNKNOWN",
		200:  "kCIM_ERR_SUCCESS",
		201:  "kCIM_ERR_INTERNAL_ERROR",
		2000: "kCIM_ERR_LOGIN_DB_VALIDATE_FAILED",
		2001: "kCIM_ERR_LOGIN_VERSION_TOO_OLD",
		2002: "kCIM_ERR_LOGIN_INVALID_USER_TOKEN",
		2003: "kCIM_ERR_LOGIN_INVALID_USER_OR_PWD",
		9000: "kCIM_ERROR_USER_ALREADY_EXIST",
		9001: "kCIM_ERROR_USER_INVALID_PARAMETER",
		9002: "kCIM_ERROR_USER_NOT_EXIST",
	}
	CIMErrorCode_value = map[string]int32{
		"kCIM_ERR_UNKNOWN":                   0,
		"kCIM_ERR_SUCCESS":                   200,
		"kCIM_ERR_INTERNAL_ERROR":            201,
		"kCIM_ERR_LOGIN_DB_VALIDATE_FAILED":  2000,
		"kCIM_ERR_LOGIN_VERSION_TOO_OLD":     2001,
		"kCIM_ERR_LOGIN_INVALID_USER_TOKEN":  2002,
		"kCIM_ERR_LOGIN_INVALID_USER_OR_PWD": 2003,
		"kCIM_ERROR_USER_ALREADY_EXIST":      9000,
		"kCIM_ERROR_USER_INVALID_PARAMETER":  9001,
		"kCIM_ERROR_USER_NOT_EXIST":          9002,
	}
)

func (x CIMErrorCode) Enum() *CIMErrorCode {
	p := new(CIMErrorCode)
	*p = x
	return p
}

func (x CIMErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CIMErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_CIM_Def_proto_enumTypes[2].Descriptor()
}

func (CIMErrorCode) Type() protoreflect.EnumType {
	return &file_CIM_Def_proto_enumTypes[2]
}

func (x CIMErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CIMErrorCode.Descriptor instead.
func (CIMErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_CIM_Def_proto_rawDescGZIP(), []int{2}
}

// 客户端类型
type CIMClientType int32

const (
	CIMClientType_kCIM_CLIENT_TYPE_DEFAULT    CIMClientType = 0 // unset
	CIMClientType_kCIM_CLIENT_TYPE_ANDROID    CIMClientType = 1 // 安卓
	CIMClientType_kCIM_CLIENT_TYPE_IOS        CIMClientType = 2 // iOS
	CIMClientType_kCIM_CLIENT_TYPE_WEB        CIMClientType = 3 // WebSocket
	CIMClientType_kCIM_CLIENT_TYPE_REST_API   CIMClientType = 4 // RestAPI
	CIMClientType_kCIM_CLIENT_TYPE_PC_WINDOWS CIMClientType = 5 // PC Windows
	CIMClientType_kCIM_CLIENT_TYPE_MAC_OS     CIMClientType = 6 // MAC
)

// Enum value maps for CIMClientType.
var (
	CIMClientType_name = map[int32]string{
		0: "kCIM_CLIENT_TYPE_DEFAULT",
		1: "kCIM_CLIENT_TYPE_ANDROID",
		2: "kCIM_CLIENT_TYPE_IOS",
		3: "kCIM_CLIENT_TYPE_WEB",
		4: "kCIM_CLIENT_TYPE_REST_API",
		5: "kCIM_CLIENT_TYPE_PC_WINDOWS",
		6: "kCIM_CLIENT_TYPE_MAC_OS",
	}
	CIMClientType_value = map[string]int32{
		"kCIM_CLIENT_TYPE_DEFAULT":    0,
		"kCIM_CLIENT_TYPE_ANDROID":    1,
		"kCIM_CLIENT_TYPE_IOS":        2,
		"kCIM_CLIENT_TYPE_WEB":        3,
		"kCIM_CLIENT_TYPE_REST_API":   4,
		"kCIM_CLIENT_TYPE_PC_WINDOWS": 5,
		"kCIM_CLIENT_TYPE_MAC_OS":     6,
	}
)

func (x CIMClientType) Enum() *CIMClientType {
	p := new(CIMClientType)
	*p = x
	return p
}

func (x CIMClientType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CIMClientType) Descriptor() protoreflect.EnumDescriptor {
	return file_CIM_Def_proto_enumTypes[3].Descriptor()
}

func (CIMClientType) Type() protoreflect.EnumType {
	return &file_CIM_Def_proto_enumTypes[3]
}

func (x CIMClientType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CIMClientType.Descriptor instead.
func (CIMClientType) EnumDescriptor() ([]byte, []int) {
	return file_CIM_Def_proto_rawDescGZIP(), []int{3}
}

// 会话类型
type CIMSessionType int32

const (
	CIMSessionType_kCIM_SESSION_TYPE_Invalid CIMSessionType = 0 // 无效会话
	CIMSessionType_kCIM_SESSION_TYPE_SINGLE  CIMSessionType = 1 // 单聊
	CIMSessionType_kCIM_SESSION_TYPE_GROUP   CIMSessionType = 2 // 群聊
)

// Enum value maps for CIMSessionType.
var (
	CIMSessionType_name = map[int32]string{
		0: "kCIM_SESSION_TYPE_Invalid",
		1: "kCIM_SESSION_TYPE_SINGLE",
		2: "kCIM_SESSION_TYPE_GROUP",
	}
	CIMSessionType_value = map[string]int32{
		"kCIM_SESSION_TYPE_Invalid": 0,
		"kCIM_SESSION_TYPE_SINGLE":  1,
		"kCIM_SESSION_TYPE_GROUP":   2,
	}
)

func (x CIMSessionType) Enum() *CIMSessionType {
	p := new(CIMSessionType)
	*p = x
	return p
}

func (x CIMSessionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CIMSessionType) Descriptor() protoreflect.EnumDescriptor {
	return file_CIM_Def_proto_enumTypes[4].Descriptor()
}

func (CIMSessionType) Type() protoreflect.EnumType {
	return &file_CIM_Def_proto_enumTypes[4]
}

func (x CIMSessionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CIMSessionType.Descriptor instead.
func (CIMSessionType) EnumDescriptor() ([]byte, []int) {
	return file_CIM_Def_proto_rawDescGZIP(), []int{4}
}

// 消息类型
type CIMMsgType int32

const (
	CIMMsgType_kCIM_MSG_TYPE_UNKNOWN      CIMMsgType = 0  // 未知类型消息，本地使用，发送时请勿使用
	CIMMsgType_kCIM_MSG_TYPE_TEXT         CIMMsgType = 1  // 文本
	CIMMsgType_kCIM_MSG_TYPE_FILE         CIMMsgType = 2  // 文件
	CIMMsgType_kCIM_MSG_TYPE_IMAGE        CIMMsgType = 3  // 图片
	CIMMsgType_kCIM_MSG_TYPE_AUDIO        CIMMsgType = 4  // 声音
	CIMMsgType_kCIM_MSG_TYPE_VIDEO        CIMMsgType = 5  // 视频
	CIMMsgType_kCIM_MSG_TYPE_LOCATION     CIMMsgType = 6  // 位置
	CIMMsgType_kCIM_MSG_TYPE_ROBOT        CIMMsgType = 7  // 图灵机器人消息
	CIMMsgType_kCIM_MSG_TYPE_TIPS         CIMMsgType = 8  // 提醒类型
	CIMMsgType_kCIM_MSG_TYPE_NOTIFACATION CIMMsgType = 9  // 系统通知（包括入群出群通知等）
	CIMMsgType_kCIM_MSG_TYPE_AVCHAT       CIMMsgType = 10 // 由音视频通话产生的消息
)

// Enum value maps for CIMMsgType.
var (
	CIMMsgType_name = map[int32]string{
		0:  "kCIM_MSG_TYPE_UNKNOWN",
		1:  "kCIM_MSG_TYPE_TEXT",
		2:  "kCIM_MSG_TYPE_FILE",
		3:  "kCIM_MSG_TYPE_IMAGE",
		4:  "kCIM_MSG_TYPE_AUDIO",
		5:  "kCIM_MSG_TYPE_VIDEO",
		6:  "kCIM_MSG_TYPE_LOCATION",
		7:  "kCIM_MSG_TYPE_ROBOT",
		8:  "kCIM_MSG_TYPE_TIPS",
		9:  "kCIM_MSG_TYPE_NOTIFACATION",
		10: "kCIM_MSG_TYPE_AVCHAT",
	}
	CIMMsgType_value = map[string]int32{
		"kCIM_MSG_TYPE_UNKNOWN":      0,
		"kCIM_MSG_TYPE_TEXT":         1,
		"kCIM_MSG_TYPE_FILE":         2,
		"kCIM_MSG_TYPE_IMAGE":        3,
		"kCIM_MSG_TYPE_AUDIO":        4,
		"kCIM_MSG_TYPE_VIDEO":        5,
		"kCIM_MSG_TYPE_LOCATION":     6,
		"kCIM_MSG_TYPE_ROBOT":        7,
		"kCIM_MSG_TYPE_TIPS":         8,
		"kCIM_MSG_TYPE_NOTIFACATION": 9,
		"kCIM_MSG_TYPE_AVCHAT":       10,
	}
)

func (x CIMMsgType) Enum() *CIMMsgType {
	p := new(CIMMsgType)
	*p = x
	return p
}

func (x CIMMsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CIMMsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_CIM_Def_proto_enumTypes[5].Descriptor()
}

func (CIMMsgType) Type() protoreflect.EnumType {
	return &file_CIM_Def_proto_enumTypes[5]
}

func (x CIMMsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CIMMsgType.Descriptor instead.
func (CIMMsgType) EnumDescriptor() ([]byte, []int) {
	return file_CIM_Def_proto_rawDescGZIP(), []int{5}
}

// 消息状态
type CIMMsgStatus int32

const (
	CIMMsgStatus_kCIM_MSG_STATUS_NONE      CIMMsgStatus = 0  // 默认，不能当查询条件，意义太多
	CIMMsgStatus_kCIM_MSG_STATUS_UNREAD    CIMMsgStatus = 1  // 收到消息，未读
	CIMMsgStatus_kCIM_MSG_STATUS_READ      CIMMsgStatus = 2  // 收到消息，已读
	CIMMsgStatus_kCIM_MSG_STATUS_DELETED   CIMMsgStatus = 3  // 已删
	CIMMsgStatus_kCIM_MSG_STATUS_SENDING   CIMMsgStatus = 4  // 发送中
	CIMMsgStatus_kCIM_MSG_STATUS_SENT      CIMMsgStatus = 5  // 已发送
	CIMMsgStatus_kCIM_MSG_STATUS_RECEIPT   CIMMsgStatus = 6  // 对方已读发送的内容
	CIMMsgStatus_kCIM_MSG_STATUS_DRAFT     CIMMsgStatus = 7  // 草稿
	CIMMsgStatus_kCIM_MSG_STATUS_SendCacel CIMMsgStatus = 8  // 发送取消
	CIMMsgStatus_kCIM_MSG_STATUS_REFUSED   CIMMsgStatus = 9  // 被对方拒绝，比如被对方加入黑名单等等
	CIMMsgStatus_kCIM_MSG_STATUS_FAILED    CIMMsgStatus = 10 // 发送失败，客户端使用
)

// Enum value maps for CIMMsgStatus.
var (
	CIMMsgStatus_name = map[int32]string{
		0:  "kCIM_MSG_STATUS_NONE",
		1:  "kCIM_MSG_STATUS_UNREAD",
		2:  "kCIM_MSG_STATUS_READ",
		3:  "kCIM_MSG_STATUS_DELETED",
		4:  "kCIM_MSG_STATUS_SENDING",
		5:  "kCIM_MSG_STATUS_SENT",
		6:  "kCIM_MSG_STATUS_RECEIPT",
		7:  "kCIM_MSG_STATUS_DRAFT",
		8:  "kCIM_MSG_STATUS_SendCacel",
		9:  "kCIM_MSG_STATUS_REFUSED",
		10: "kCIM_MSG_STATUS_FAILED",
	}
	CIMMsgStatus_value = map[string]int32{
		"kCIM_MSG_STATUS_NONE":      0,
		"kCIM_MSG_STATUS_UNREAD":    1,
		"kCIM_MSG_STATUS_READ":      2,
		"kCIM_MSG_STATUS_DELETED":   3,
		"kCIM_MSG_STATUS_SENDING":   4,
		"kCIM_MSG_STATUS_SENT":      5,
		"kCIM_MSG_STATUS_RECEIPT":   6,
		"kCIM_MSG_STATUS_DRAFT":     7,
		"kCIM_MSG_STATUS_SendCacel": 8,
		"kCIM_MSG_STATUS_REFUSED":   9,
		"kCIM_MSG_STATUS_FAILED":    10,
	}
)

func (x CIMMsgStatus) Enum() *CIMMsgStatus {
	p := new(CIMMsgStatus)
	*p = x
	return p
}

func (x CIMMsgStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CIMMsgStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_CIM_Def_proto_enumTypes[6].Descriptor()
}

func (CIMMsgStatus) Type() protoreflect.EnumType {
	return &file_CIM_Def_proto_enumTypes[6]
}

func (x CIMMsgStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CIMMsgStatus.Descriptor instead.
func (CIMMsgStatus) EnumDescriptor() ([]byte, []int) {
	return file_CIM_Def_proto_rawDescGZIP(), []int{6}
}

// 通知类型
type CIMMsgNotificationType int32

const (
	// 未知
	CIMMsgNotificationType_kCIM_MSG_NOTIFICATION_UNKNOWN CIMMsgNotificationType = 0
	// 创建群
	// {"groupId":"22","groupName":"测试群","owner":"1008","ownerNick":"1008",ids:["1001","1002"],nickNames:["1001","1002"]}
	CIMMsgNotificationType_kCIM_MSG_NOTIFICATION_GROUP_CREATE CIMMsgNotificationType = 1
	// 群拉人（被拉）
	// {"groupId":"22","userId":“1008”,"ids":["1001", "1002"],nickNames:["1001","1002"]}
	CIMMsgNotificationType_kCIM_MSG_NOTIFICATION_GROUP_BE_INVITE CIMMsgNotificationType = 2
	// 群踢人
	// {"groupId":"22",“ownerUserId”:“1008”,"ids":["1001", "1002"],nickNames:["1001","1002"]}
	CIMMsgNotificationType_kCIM_MSG_NOTIFICATION_GROUP_KICK CIMMsgNotificationType = 3
	// 退出群
	// {"groupId":"22","ids":["1001", "1002"],nickNames:["1001","1002"]}
	CIMMsgNotificationType_kCIM_MSG_NOTIFICATION_GROUP_LEAVE CIMMsgNotificationType = 4
	// 群信息更新
	// {"team_info":team_info}
	CIMMsgNotificationType_kCIM_MSG_NOTIFICATION_GROUP_UPDATE CIMMsgNotificationType = 5
	// 群解散
	// {"groupId":"22"}
	CIMMsgNotificationType_kCIM_MSG_NOTIFICATION_GROUP_DISMISS CIMMsgNotificationType = 6
)

// Enum value maps for CIMMsgNotificationType.
var (
	CIMMsgNotificationType_name = map[int32]string{
		0: "kCIM_MSG_NOTIFICATION_UNKNOWN",
		1: "kCIM_MSG_NOTIFICATION_GROUP_CREATE",
		2: "kCIM_MSG_NOTIFICATION_GROUP_BE_INVITE",
		3: "kCIM_MSG_NOTIFICATION_GROUP_KICK",
		4: "kCIM_MSG_NOTIFICATION_GROUP_LEAVE",
		5: "kCIM_MSG_NOTIFICATION_GROUP_UPDATE",
		6: "kCIM_MSG_NOTIFICATION_GROUP_DISMISS",
	}
	CIMMsgNotificationType_value = map[string]int32{
		"kCIM_MSG_NOTIFICATION_UNKNOWN":         0,
		"kCIM_MSG_NOTIFICATION_GROUP_CREATE":    1,
		"kCIM_MSG_NOTIFICATION_GROUP_BE_INVITE": 2,
		"kCIM_MSG_NOTIFICATION_GROUP_KICK":      3,
		"kCIM_MSG_NOTIFICATION_GROUP_LEAVE":     4,
		"kCIM_MSG_NOTIFICATION_GROUP_UPDATE":    5,
		"kCIM_MSG_NOTIFICATION_GROUP_DISMISS":   6,
	}
)

func (x CIMMsgNotificationType) Enum() *CIMMsgNotificationType {
	p := new(CIMMsgNotificationType)
	*p = x
	return p
}

func (x CIMMsgNotificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CIMMsgNotificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_CIM_Def_proto_enumTypes[7].Descriptor()
}

func (CIMMsgNotificationType) Type() protoreflect.EnumType {
	return &file_CIM_Def_proto_enumTypes[7]
}

func (x CIMMsgNotificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CIMMsgNotificationType.Descriptor instead.
func (CIMMsgNotificationType) EnumDescriptor() ([]byte, []int) {
	return file_CIM_Def_proto_rawDescGZIP(), []int{7}
}

// 会话状态
type CIMSessionStatusType int32

const (
	CIMSessionStatusType_kCIM_SESSION_STATUS_UNKNOWN CIMSessionStatusType = 0 // 未知
	CIMSessionStatusType_kCIM_SESSION_STATUS_OK      CIMSessionStatusType = 1
	CIMSessionStatusType_kCIM_SESSION_STATUS_DELETE  CIMSessionStatusType = 2
)

// Enum value maps for CIMSessionStatusType.
var (
	CIMSessionStatusType_name = map[int32]string{
		0: "kCIM_SESSION_STATUS_UNKNOWN",
		1: "kCIM_SESSION_STATUS_OK",
		2: "kCIM_SESSION_STATUS_DELETE",
	}
	CIMSessionStatusType_value = map[string]int32{
		"kCIM_SESSION_STATUS_UNKNOWN": 0,
		"kCIM_SESSION_STATUS_OK":      1,
		"kCIM_SESSION_STATUS_DELETE":  2,
	}
)

func (x CIMSessionStatusType) Enum() *CIMSessionStatusType {
	p := new(CIMSessionStatusType)
	*p = x
	return p
}

func (x CIMSessionStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CIMSessionStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_CIM_Def_proto_enumTypes[8].Descriptor()
}

func (CIMSessionStatusType) Type() protoreflect.EnumType {
	return &file_CIM_Def_proto_enumTypes[8]
}

func (x CIMSessionStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CIMSessionStatusType.Descriptor instead.
func (CIMSessionStatusType) EnumDescriptor() ([]byte, []int) {
	return file_CIM_Def_proto_rawDescGZIP(), []int{8}
}

// 消息属性
type CIMMsgFeature int32

const (
	CIMMsgFeature_kCIM_MSG_FEATURE_DEFAULT CIMMsgFeature = 0 // 默认
	// kCIM_MSG_FEATURE_LEAVE_MSG = 1;      // 离线消息(和漫游消息有何区别)
	CIMMsgFeature_kCIM_MSG_FEATURE_ROAM_MSG CIMMsgFeature = 2 // 漫游消息，多端同步接收，永久存储(或1年)
)

// Enum value maps for CIMMsgFeature.
var (
	CIMMsgFeature_name = map[int32]string{
		0: "kCIM_MSG_FEATURE_DEFAULT",
		2: "kCIM_MSG_FEATURE_ROAM_MSG",
	}
	CIMMsgFeature_value = map[string]int32{
		"kCIM_MSG_FEATURE_DEFAULT":  0,
		"kCIM_MSG_FEATURE_ROAM_MSG": 2,
	}
)

func (x CIMMsgFeature) Enum() *CIMMsgFeature {
	p := new(CIMMsgFeature)
	*p = x
	return p
}

func (x CIMMsgFeature) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CIMMsgFeature) Descriptor() protoreflect.EnumDescriptor {
	return file_CIM_Def_proto_enumTypes[9].Descriptor()
}

func (CIMMsgFeature) Type() protoreflect.EnumType {
	return &file_CIM_Def_proto_enumTypes[9]
}

func (x CIMMsgFeature) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CIMMsgFeature.Descriptor instead.
func (CIMMsgFeature) EnumDescriptor() ([]byte, []int) {
	return file_CIM_Def_proto_rawDescGZIP(), []int{9}
}

// Voip邀请类型
type CIMVoipInviteType int32

const (
	CIMVoipInviteType_kCIM_VOIP_INVITE_TYPE_UNKNOWN    CIMVoipInviteType = 0 // default
	CIMVoipInviteType_kCIM_VOIP_INVITE_TYPE_VOICE_CALL CIMVoipInviteType = 1 // 语音通话
	CIMVoipInviteType_kCIM_VOIP_INVITE_TYPE_VIDEO_CALL CIMVoipInviteType = 2 // 视频通话，包含语音但可以静音
)

// Enum value maps for CIMVoipInviteType.
var (
	CIMVoipInviteType_name = map[int32]string{
		0: "kCIM_VOIP_INVITE_TYPE_UNKNOWN",
		1: "kCIM_VOIP_INVITE_TYPE_VOICE_CALL",
		2: "kCIM_VOIP_INVITE_TYPE_VIDEO_CALL",
	}
	CIMVoipInviteType_value = map[string]int32{
		"kCIM_VOIP_INVITE_TYPE_UNKNOWN":    0,
		"kCIM_VOIP_INVITE_TYPE_VOICE_CALL": 1,
		"kCIM_VOIP_INVITE_TYPE_VIDEO_CALL": 2,
	}
)

func (x CIMVoipInviteType) Enum() *CIMVoipInviteType {
	p := new(CIMVoipInviteType)
	*p = x
	return p
}

func (x CIMVoipInviteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CIMVoipInviteType) Descriptor() protoreflect.EnumDescriptor {
	return file_CIM_Def_proto_enumTypes[10].Descriptor()
}

func (CIMVoipInviteType) Type() protoreflect.EnumType {
	return &file_CIM_Def_proto_enumTypes[10]
}

func (x CIMVoipInviteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CIMVoipInviteType.Descriptor instead.
func (CIMVoipInviteType) EnumDescriptor() ([]byte, []int) {
	return file_CIM_Def_proto_rawDescGZIP(), []int{10}
}

// Voip邀请状态
type CIMInviteRspCode int32

const (
	CIMInviteRspCode_kCIM_VOIP_INVITE_CODE_UNKNOWN CIMInviteRspCode = 0   // 0 unknown
	CIMInviteRspCode_kCIM_VOIP_INVITE_CODE_TRYING  CIMInviteRspCode = 100 // 100 tring
	CIMInviteRspCode_kCIM_VOIP_INVITE_CODE_RINGING CIMInviteRspCode = 180 // 180 ringing
	CIMInviteRspCode_KCIM_VOIP_INVITE_CODE_OK      CIMInviteRspCode = 200 // 200 ok
)

// Enum value maps for CIMInviteRspCode.
var (
	CIMInviteRspCode_name = map[int32]string{
		0:   "kCIM_VOIP_INVITE_CODE_UNKNOWN",
		100: "kCIM_VOIP_INVITE_CODE_TRYING",
		180: "kCIM_VOIP_INVITE_CODE_RINGING",
		200: "KCIM_VOIP_INVITE_CODE_OK",
	}
	CIMInviteRspCode_value = map[string]int32{
		"kCIM_VOIP_INVITE_CODE_UNKNOWN": 0,
		"kCIM_VOIP_INVITE_CODE_TRYING":  100,
		"kCIM_VOIP_INVITE_CODE_RINGING": 180,
		"KCIM_VOIP_INVITE_CODE_OK":      200,
	}
)

func (x CIMInviteRspCode) Enum() *CIMInviteRspCode {
	p := new(CIMInviteRspCode)
	*p = x
	return p
}

func (x CIMInviteRspCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CIMInviteRspCode) Descriptor() protoreflect.EnumDescriptor {
	return file_CIM_Def_proto_enumTypes[11].Descriptor()
}

func (CIMInviteRspCode) Type() protoreflect.EnumType {
	return &file_CIM_Def_proto_enumTypes[11]
}

func (x CIMInviteRspCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CIMInviteRspCode.Descriptor instead.
func (CIMInviteRspCode) EnumDescriptor() ([]byte, []int) {
	return file_CIM_Def_proto_rawDescGZIP(), []int{11}
}

// Voip挂断原因
type CIMVoipByeReason int32

const (
	CIMVoipByeReason_kCIM_VOIP_BYE_REASON_UNKNOWN              CIMVoipByeReason = 0 // default
	CIMVoipByeReason_kCIM_VOIP_BYE_REASON_CANCEL               CIMVoipByeReason = 1 // 我方取消
	CIMVoipByeReason_kCIM_VOIP_BYE_REASON_REJECT               CIMVoipByeReason = 2 // 对方拒绝
	CIMVoipByeReason_kCIM_VOIP_BYE_REASON_END                  CIMVoipByeReason = 3 // 通话结束
	CIMVoipByeReason_kCIM_VOIP_BYE_REASON_BUSY                 CIMVoipByeReason = 4 // 对方正忙
	CIMVoipByeReason_kCIM_VOIP_BYE_REASON_ONLINE_CLIENT_REJECT CIMVoipByeReason = 5 // 其他端拒绝通话
)

// Enum value maps for CIMVoipByeReason.
var (
	CIMVoipByeReason_name = map[int32]string{
		0: "kCIM_VOIP_BYE_REASON_UNKNOWN",
		1: "kCIM_VOIP_BYE_REASON_CANCEL",
		2: "kCIM_VOIP_BYE_REASON_REJECT",
		3: "kCIM_VOIP_BYE_REASON_END",
		4: "kCIM_VOIP_BYE_REASON_BUSY",
		5: "kCIM_VOIP_BYE_REASON_ONLINE_CLIENT_REJECT",
	}
	CIMVoipByeReason_value = map[string]int32{
		"kCIM_VOIP_BYE_REASON_UNKNOWN":              0,
		"kCIM_VOIP_BYE_REASON_CANCEL":               1,
		"kCIM_VOIP_BYE_REASON_REJECT":               2,
		"kCIM_VOIP_BYE_REASON_END":                  3,
		"kCIM_VOIP_BYE_REASON_BUSY":                 4,
		"kCIM_VOIP_BYE_REASON_ONLINE_CLIENT_REJECT": 5,
	}
)

func (x CIMVoipByeReason) Enum() *CIMVoipByeReason {
	p := new(CIMVoipByeReason)
	*p = x
	return p
}

func (x CIMVoipByeReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CIMVoipByeReason) Descriptor() protoreflect.EnumDescriptor {
	return file_CIM_Def_proto_enumTypes[12].Descriptor()
}

func (CIMVoipByeReason) Type() protoreflect.EnumType {
	return &file_CIM_Def_proto_enumTypes[12]
}

func (x CIMVoipByeReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CIMVoipByeReason.Descriptor instead.
func (CIMVoipByeReason) EnumDescriptor() ([]byte, []int) {
	return file_CIM_Def_proto_rawDescGZIP(), []int{12}
}

// 消息错误码
type CIMResCode int32

const (
	CIMResCode_kCIM_RES_CODE_UNKNOWN CIMResCode = 0 // unknown
	CIMResCode_kCIM_RES_CODE_OK      CIMResCode = 1 // 一切正常
)

// Enum value maps for CIMResCode.
var (
	CIMResCode_name = map[int32]string{
		0: "kCIM_RES_CODE_UNKNOWN",
		1: "kCIM_RES_CODE_OK",
	}
	CIMResCode_value = map[string]int32{
		"kCIM_RES_CODE_UNKNOWN": 0,
		"kCIM_RES_CODE_OK":      1,
	}
)

func (x CIMResCode) Enum() *CIMResCode {
	p := new(CIMResCode)
	*p = x
	return p
}

func (x CIMResCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CIMResCode) Descriptor() protoreflect.EnumDescriptor {
	return file_CIM_Def_proto_enumTypes[13].Descriptor()
}

func (CIMResCode) Type() protoreflect.EnumType {
	return &file_CIM_Def_proto_enumTypes[13]
}

func (x CIMResCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CIMResCode.Descriptor instead.
func (CIMResCode) EnumDescriptor() ([]byte, []int) {
	return file_CIM_Def_proto_rawDescGZIP(), []int{13}
}

// 用户信息
type CIMUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	NickName      string `protobuf:"bytes,2,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`                  // 用户昵称
	NickNameSpell string `protobuf:"bytes,3,opt,name=nick_name_spell,json=nickNameSpell,proto3" json:"nick_name_spell,omitempty"` // 昵称拼音
	//optional
	Phone      string `protobuf:"bytes,9,opt,name=phone,proto3" json:"phone,omitempty"`                              // 手机号
	AvatarUrl  string `protobuf:"bytes,10,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`    // 头像URL
	AttachInfo string `protobuf:"bytes,11,opt,name=attach_info,json=attachInfo,proto3" json:"attach_info,omitempty"` // 自定义字段
}

func (x *CIMUserInfo) Reset() {
	*x = CIMUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CIM_Def_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CIMUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CIMUserInfo) ProtoMessage() {}

func (x *CIMUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_CIM_Def_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CIMUserInfo.ProtoReflect.Descriptor instead.
func (*CIMUserInfo) Descriptor() ([]byte, []int) {
	return file_CIM_Def_proto_rawDescGZIP(), []int{0}
}

func (x *CIMUserInfo) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CIMUserInfo) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *CIMUserInfo) GetNickNameSpell() string {
	if x != nil {
		return x.NickNameSpell
	}
	return ""
}

func (x *CIMUserInfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CIMUserInfo) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *CIMUserInfo) GetAttachInfo() string {
	if x != nil {
		return x.AttachInfo
	}
	return ""
}

// 会话信息
type CIMContactSessionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId     uint64               `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                                               // 会话id
	SessionType   CIMSessionType       `protobuf:"varint,2,opt,name=session_type,json=sessionType,proto3,enum=CIM.Def.CIMSessionType" json:"session_type,omitempty"`             // 会话类型
	SessionStatus CIMSessionStatusType `protobuf:"varint,3,opt,name=session_status,json=sessionStatus,proto3,enum=CIM.Def.CIMSessionStatusType" json:"session_status,omitempty"` // 会话修改命令，预留
	UnreadCnt     uint32               `protobuf:"varint,4,opt,name=unread_cnt,json=unreadCnt,proto3" json:"unread_cnt,omitempty"`                                               // 该会话未读消息数量
	UpdatedTime   uint32               `protobuf:"varint,5,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`                                         // 更新时间
	MsgId         string               `protobuf:"bytes,6,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`                                                            // 最新一条消息的id（UUID）
	ServerMsgId   uint64               `protobuf:"varint,7,opt,name=server_msg_id,json=serverMsgId,proto3" json:"server_msg_id,omitempty"`                                       // 最新一条消息服务端的id（顺序递增）
	MsgTimeStamp  uint32               `protobuf:"varint,8,opt,name=msg_time_stamp,json=msgTimeStamp,proto3" json:"msg_time_stamp,omitempty"`                                    // 最新一条消息时间戳（毫秒）
	MsgData       []byte               `protobuf:"bytes,9,opt,name=msg_data,json=msgData,proto3" json:"msg_data,omitempty"`                                                      // 最新一条消息的内容
	MsgType       CIMMsgType           `protobuf:"varint,10,opt,name=msg_type,json=msgType,proto3,enum=CIM.Def.CIMMsgType" json:"msg_type,omitempty"`                            // 最新一条消息的类型
	MsgFromUserId uint64               `protobuf:"varint,11,opt,name=msg_from_user_id,json=msgFromUserId,proto3" json:"msg_from_user_id,omitempty"`                              // 最新一条消息的发送者
	MsgStatus     CIMMsgStatus         `protobuf:"varint,12,opt,name=msg_status,json=msgStatus,proto3,enum=CIM.Def.CIMMsgStatus" json:"msg_status,omitempty"`                    // 最新一条消息的状态（预留）
	//optional
	MsgAttach string `protobuf:"bytes,13,opt,name=msg_attach,json=msgAttach,proto3" json:"msg_attach,omitempty"` // 最新一条消息的附件（预留）
	//optional
	ExtendData string `protobuf:"bytes,14,opt,name=extend_data,json=extendData,proto3" json:"extend_data,omitempty"` // 本地扩展字段（限制4096）
	//optional
	IsRobotSession bool `protobuf:"varint,15,opt,name=is_robot_session,json=isRobotSession,proto3" json:"is_robot_session,omitempty"` // 是否为机器人会话
}

func (x *CIMContactSessionInfo) Reset() {
	*x = CIMContactSessionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CIM_Def_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CIMContactSessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CIMContactSessionInfo) ProtoMessage() {}

func (x *CIMContactSessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_CIM_Def_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CIMContactSessionInfo.ProtoReflect.Descriptor instead.
func (*CIMContactSessionInfo) Descriptor() ([]byte, []int) {
	return file_CIM_Def_proto_rawDescGZIP(), []int{1}
}

func (x *CIMContactSessionInfo) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *CIMContactSessionInfo) GetSessionType() CIMSessionType {
	if x != nil {
		return x.SessionType
	}
	return CIMSessionType_kCIM_SESSION_TYPE_Invalid
}

func (x *CIMContactSessionInfo) GetSessionStatus() CIMSessionStatusType {
	if x != nil {
		return x.SessionStatus
	}
	return CIMSessionStatusType_kCIM_SESSION_STATUS_UNKNOWN
}

func (x *CIMContactSessionInfo) GetUnreadCnt() uint32 {
	if x != nil {
		return x.UnreadCnt
	}
	return 0
}

func (x *CIMContactSessionInfo) GetUpdatedTime() uint32 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

func (x *CIMContactSessionInfo) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *CIMContactSessionInfo) GetServerMsgId() uint64 {
	if x != nil {
		return x.ServerMsgId
	}
	return 0
}

func (x *CIMContactSessionInfo) GetMsgTimeStamp() uint32 {
	if x != nil {
		return x.MsgTimeStamp
	}
	return 0
}

func (x *CIMContactSessionInfo) GetMsgData() []byte {
	if x != nil {
		return x.MsgData
	}
	return nil
}

func (x *CIMContactSessionInfo) GetMsgType() CIMMsgType {
	if x != nil {
		return x.MsgType
	}
	return CIMMsgType_kCIM_MSG_TYPE_UNKNOWN
}

func (x *CIMContactSessionInfo) GetMsgFromUserId() uint64 {
	if x != nil {
		return x.MsgFromUserId
	}
	return 0
}

func (x *CIMContactSessionInfo) GetMsgStatus() CIMMsgStatus {
	if x != nil {
		return x.MsgStatus
	}
	return CIMMsgStatus_kCIM_MSG_STATUS_NONE
}

func (x *CIMContactSessionInfo) GetMsgAttach() string {
	if x != nil {
		return x.MsgAttach
	}
	return ""
}

func (x *CIMContactSessionInfo) GetExtendData() string {
	if x != nil {
		return x.ExtendData
	}
	return ""
}

func (x *CIMContactSessionInfo) GetIsRobotSession() bool {
	if x != nil {
		return x.IsRobotSession
	}
	return false
}

// 消息信息
type CIMMsgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientMsgId string         `protobuf:"bytes,1,opt,name=client_msg_id,json=clientMsgId,proto3" json:"client_msg_id,omitempty"`                            // 客户端消息ID（UUID）
	ServerMsgId uint64         `protobuf:"varint,2,opt,name=server_msg_id,json=serverMsgId,proto3" json:"server_msg_id,omitempty"`                           // 服务端消息ID
	MsgResCode  CIMResCode     `protobuf:"varint,3,opt,name=msg_res_code,json=msgResCode,proto3,enum=CIM.Def.CIMResCode" json:"msg_res_code,omitempty"`      // 消息错误码
	MsgFeature  CIMMsgFeature  `protobuf:"varint,4,opt,name=msg_feature,json=msgFeature,proto3,enum=CIM.Def.CIMMsgFeature" json:"msg_feature,omitempty"`     // 消息属性
	SessionType CIMSessionType `protobuf:"varint,5,opt,name=session_type,json=sessionType,proto3,enum=CIM.Def.CIMSessionType" json:"session_type,omitempty"` // 会话类型
	FromUserId  uint64         `protobuf:"varint,6,opt,name=from_user_id,json=fromUserId,proto3" json:"from_user_id,omitempty"`                              // 来源会话ID
	ToSessionId uint64         `protobuf:"varint,7,opt,name=to_session_id,json=toSessionId,proto3" json:"to_session_id,omitempty"`                           // 目标会话ID
	CreateTime  uint32         `protobuf:"varint,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                // 消息创建时间戳（毫秒）
	MsgType     CIMMsgType     `protobuf:"varint,9,opt,name=msg_type,json=msgType,proto3,enum=CIM.Def.CIMMsgType" json:"msg_type,omitempty"`                 // 消息类型
	MsgStatus   CIMMsgStatus   `protobuf:"varint,10,opt,name=msg_status,json=msgStatus,proto3,enum=CIM.Def.CIMMsgStatus" json:"msg_status,omitempty"`        // 消息状态（预留）
	MsgData     []byte         `protobuf:"bytes,11,opt,name=msg_data,json=msgData,proto3" json:"msg_data,omitempty"`                                         // 消息内容
	//optional
	Attach           string        `protobuf:"bytes,12,opt,name=attach,proto3" json:"attach,omitempty"`                                                                           // 消息附件（预留）
	SenderClientType CIMClientType `protobuf:"varint,13,opt,name=sender_client_type,json=senderClientType,proto3,enum=CIM.Def.CIMClientType" json:"sender_client_type,omitempty"` // 发送者客户端类型
}

func (x *CIMMsgInfo) Reset() {
	*x = CIMMsgInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CIM_Def_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CIMMsgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CIMMsgInfo) ProtoMessage() {}

func (x *CIMMsgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_CIM_Def_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CIMMsgInfo.ProtoReflect.Descriptor instead.
func (*CIMMsgInfo) Descriptor() ([]byte, []int) {
	return file_CIM_Def_proto_rawDescGZIP(), []int{2}
}

func (x *CIMMsgInfo) GetClientMsgId() string {
	if x != nil {
		return x.ClientMsgId
	}
	return ""
}

func (x *CIMMsgInfo) GetServerMsgId() uint64 {
	if x != nil {
		return x.ServerMsgId
	}
	return 0
}

func (x *CIMMsgInfo) GetMsgResCode() CIMResCode {
	if x != nil {
		return x.MsgResCode
	}
	return CIMResCode_kCIM_RES_CODE_UNKNOWN
}

func (x *CIMMsgInfo) GetMsgFeature() CIMMsgFeature {
	if x != nil {
		return x.MsgFeature
	}
	return CIMMsgFeature_kCIM_MSG_FEATURE_DEFAULT
}

func (x *CIMMsgInfo) GetSessionType() CIMSessionType {
	if x != nil {
		return x.SessionType
	}
	return CIMSessionType_kCIM_SESSION_TYPE_Invalid
}

func (x *CIMMsgInfo) GetFromUserId() uint64 {
	if x != nil {
		return x.FromUserId
	}
	return 0
}

func (x *CIMMsgInfo) GetToSessionId() uint64 {
	if x != nil {
		return x.ToSessionId
	}
	return 0
}

func (x *CIMMsgInfo) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *CIMMsgInfo) GetMsgType() CIMMsgType {
	if x != nil {
		return x.MsgType
	}
	return CIMMsgType_kCIM_MSG_TYPE_UNKNOWN
}

func (x *CIMMsgInfo) GetMsgStatus() CIMMsgStatus {
	if x != nil {
		return x.MsgStatus
	}
	return CIMMsgStatus_kCIM_MSG_STATUS_NONE
}

func (x *CIMMsgInfo) GetMsgData() []byte {
	if x != nil {
		return x.MsgData
	}
	return nil
}

func (x *CIMMsgInfo) GetAttach() string {
	if x != nil {
		return x.Attach
	}
	return ""
}

func (x *CIMMsgInfo) GetSenderClientType() CIMClientType {
	if x != nil {
		return x.SenderClientType
	}
	return CIMClientType_kCIM_CLIENT_TYPE_DEFAULT
}

// VOIP频道信息
type CIMChannelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelName  string `protobuf:"bytes,1,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`    // 频道名称
	ChannelToken string `protobuf:"bytes,2,opt,name=channel_token,json=channelToken,proto3" json:"channel_token,omitempty"` // 频道授权令牌
	CreatorId    uint64 `protobuf:"varint,3,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`         // 频道创建者
}

func (x *CIMChannelInfo) Reset() {
	*x = CIMChannelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CIM_Def_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CIMChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CIMChannelInfo) ProtoMessage() {}

func (x *CIMChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_CIM_Def_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CIMChannelInfo.ProtoReflect.Descriptor instead.
func (*CIMChannelInfo) Descriptor() ([]byte, []int) {
	return file_CIM_Def_proto_rawDescGZIP(), []int{3}
}

func (x *CIMChannelInfo) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *CIMChannelInfo) GetChannelToken() string {
	if x != nil {
		return x.ChannelToken
	}
	return ""
}

func (x *CIMChannelInfo) GetCreatorId() uint64 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

var File_CIM_Def_proto protoreflect.FileDescriptor

var file_CIM_Def_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x43, 0x49, 0x4d, 0x2e, 0x44, 0x65, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x43, 0x49, 0x4d, 0x2e, 0x44, 0x65, 0x66, 0x22, 0xc1, 0x01, 0x0a, 0x0b, 0x43, 0x49, 0x4d,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x6c,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xef, 0x04, 0x0a,
	0x15, 0x43, 0x49, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x43, 0x49,
	0x4d, 0x2e, 0x44, 0x65, 0x66, 0x2e, 0x43, 0x49, 0x4d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x43, 0x49, 0x4d, 0x2e,
	0x44, 0x65, 0x66, 0x2e, 0x43, 0x49, 0x4d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x73,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73,
	0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x73,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x44, 0x65,
	0x66, 0x2e, 0x43, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x6d, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x0a, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x44, 0x65, 0x66, 0x2e, 0x43, 0x49, 0x4d,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x73, 0x67, 0x5f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc6,
	0x04, 0x0a, 0x0a, 0x43, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a,
	0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0c, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x49,
	0x4d, 0x2e, 0x44, 0x65, 0x66, 0x2e, 0x43, 0x49, 0x4d, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x6d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x0b,
	0x6d, 0x73, 0x67, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x44, 0x65, 0x66, 0x2e, 0x43, 0x49, 0x4d, 0x4d,
	0x73, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x6d, 0x73, 0x67, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x43, 0x49,
	0x4d, 0x2e, 0x44, 0x65, 0x66, 0x2e, 0x43, 0x49, 0x4d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x49, 0x4d,
	0x2e, 0x44, 0x65, 0x66, 0x2e, 0x43, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x6d, 0x73, 0x67, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43,
	0x49, 0x4d, 0x2e, 0x44, 0x65, 0x66, 0x2e, 0x43, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x6d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x12, 0x44, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x43, 0x49, 0x4d, 0x2e, 0x44, 0x65, 0x66, 0x2e, 0x43, 0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x77, 0x0a, 0x0e, 0x43, 0x49, 0x4d, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x2a, 0xbf, 0x0c, 0x0a, 0x08, 0x43, 0x49, 0x4d, 0x43, 0x6d, 0x64, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x10, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f,
	0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x5f, 0x52, 0x45, 0x51, 0x10, 0x81, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x43, 0x49, 0x4d, 0x5f,
	0x43, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x52, 0x53, 0x50, 0x10, 0x82, 0x02, 0x12, 0x23, 0x0a, 0x1e, 0x6b,
	0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x83, 0x02,
	0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47,
	0x49, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x5f, 0x52,
	0x53, 0x50, 0x10, 0x84, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49,
	0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41,
	0x54, 0x10, 0x85, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44,
	0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x10,
	0x87, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x4c,
	0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x53, 0x50, 0x10, 0x88, 0x02,
	0x12, 0x2d, 0x0a, 0x28, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54,
	0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x81, 0x04, 0x12,
	0x2d, 0x0a, 0x28, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x52, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x53, 0x50, 0x10, 0x82, 0x04, 0x12, 0x1a,
	0x0a, 0x15, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x4d, 0x53, 0x47, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x85, 0x04, 0x12, 0x1a, 0x0a, 0x15, 0x6b, 0x43,
	0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4d, 0x53, 0x47, 0x5f,
	0x52, 0x53, 0x50, 0x10, 0x86, 0x04, 0x12, 0x16, 0x0a, 0x11, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43,
	0x49, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x81, 0x06, 0x12, 0x1a,
	0x0a, 0x15, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x82, 0x06, 0x12, 0x1a, 0x0a, 0x15, 0x6b, 0x43,
	0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f,
	0x41, 0x43, 0x4b, 0x10, 0x83, 0x06, 0x12, 0x1d, 0x0a, 0x18, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43,
	0x49, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x59, 0x10, 0x84, 0x06, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49,
	0x44, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x54,
	0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x85, 0x06, 0x12, 0x27,
	0x0a, 0x22, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x44,
	0x5f, 0x52, 0x53, 0x50, 0x10, 0x86, 0x06, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x43, 0x49, 0x4d, 0x5f,
	0x43, 0x49, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x4d,
	0x53, 0x47, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x87, 0x06, 0x12, 0x23, 0x0a, 0x1e,
	0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x42, 0x59, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x53, 0x50, 0x10, 0x88,
	0x06, 0x12, 0x1d, 0x0a, 0x18, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x56, 0x4f,
	0x49, 0x50, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x81, 0x08,
	0x12, 0x1f, 0x0a, 0x1a, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x56, 0x4f, 0x49,
	0x50, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x82,
	0x08, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x56, 0x4f,
	0x49, 0x50, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f,
	0x41, 0x43, 0x4b, 0x10, 0x83, 0x08, 0x12, 0x1c, 0x0a, 0x17, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43,
	0x49, 0x44, 0x5f, 0x56, 0x4f, 0x49, 0x50, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41,
	0x54, 0x10, 0x84, 0x08, 0x12, 0x1a, 0x0a, 0x15, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44,
	0x5f, 0x56, 0x4f, 0x49, 0x50, 0x5f, 0x42, 0x59, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x85, 0x08,
	0x12, 0x1a, 0x0a, 0x15, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x56, 0x4f, 0x49,
	0x50, 0x5f, 0x42, 0x59, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x10, 0x86, 0x08, 0x12, 0x1d, 0x0a, 0x18,
	0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x56, 0x4f, 0x49, 0x50, 0x5f, 0x42, 0x59,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x87, 0x08, 0x12, 0x26, 0x0a, 0x21, 0x6b,
	0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x51,
	0x10, 0x81, 0x0a, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x5f, 0x52, 0x53, 0x50, 0x10, 0x82, 0x0a, 0x12, 0x23, 0x0a, 0x1e, 0x6b,
	0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x44, 0x49,
	0x53, 0x42, 0x49, 0x4e, 0x47, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x83, 0x0a,
	0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x44, 0x49, 0x53, 0x42, 0x49, 0x4e, 0x47, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52,
	0x53, 0x50, 0x10, 0x84, 0x0a, 0x12, 0x1c, 0x0a, 0x17, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49,
	0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x51,
	0x10, 0x85, 0x0a, 0x12, 0x1c, 0x0a, 0x17, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x52, 0x53, 0x50, 0x10, 0x86,
	0x0a, 0x12, 0x1c, 0x0a, 0x17, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x87, 0x0a, 0x12,
	0x1c, 0x0a, 0x17, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x53, 0x50, 0x10, 0x88, 0x0a, 0x12, 0x1c, 0x0a,
	0x17, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x89, 0x0a, 0x12, 0x1c, 0x0a, 0x17, 0x6b,
	0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x52, 0x53, 0x50, 0x10, 0x90, 0x0a, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x43, 0x49,
	0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x56, 0x49,
	0x54, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x91, 0x0a,
	0x12, 0x25, 0x0a, 0x20, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x5f, 0x52, 0x53, 0x50, 0x10, 0x92, 0x0a, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x43, 0x49, 0x4d, 0x5f,
	0x43, 0x49, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x4f,
	0x55, 0x54, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x93, 0x0a,
	0x12, 0x27, 0x0a, 0x22, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x5f, 0x52, 0x53, 0x50, 0x10, 0x94, 0x0a, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x43, 0x49,
	0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46,
	0x59, 0x10, 0x95, 0x0a, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x96, 0x0a, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x43, 0x49,
	0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x52, 0x53, 0x50, 0x10, 0x97, 0x0a, 0x12, 0x28,
	0x0a, 0x23, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x49, 0x44, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e,
	0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x81, 0x0c, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x43, 0x49, 0x4d,
	0x5f, 0x43, 0x49, 0x44, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x53, 0x50, 0x10,
	0x82, 0x0c, 0x2a, 0x66, 0x0a, 0x10, 0x43, 0x49, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x72, 0x61,
	0x6c, 0x43, 0x6d, 0x64, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x53,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x18,
	0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x44, 0x42, 0x5f, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x81, 0x0e, 0x12, 0x1d, 0x0a, 0x18, 0x6b,
	0x43, 0x49, 0x4d, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x44, 0x42, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x10, 0x82, 0x0e, 0x2a, 0xe3, 0x02, 0x0a, 0x0c, 0x43,
	0x49, 0x4d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b,
	0x43, 0x49, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x10, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0xc8, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x6b, 0x43, 0x49, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0xc9, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x45,
	0x52, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x44, 0x42, 0x5f, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xd0, 0x0f, 0x12, 0x23,
	0x0a, 0x1e, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4f, 0x4c, 0x44,
	0x10, 0xd1, 0x0f, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0xd2, 0x0f, 0x12, 0x27, 0x0a, 0x22, 0x6b,
	0x43, 0x49, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x5f, 0x50, 0x57,
	0x44, 0x10, 0xd3, 0x0f, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xa8, 0x46, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x43, 0x49, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0xa9, 0x46,
	0x12, 0x1e, 0x0a, 0x19, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xaa, 0x46,
	0x2a, 0xdc, 0x01, 0x0a, 0x0d, 0x43, 0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4f, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x43, 0x49, 0x4d,
	0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x42,
	0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x50, 0x49, 0x10,
	0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x43, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53,
	0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x4f, 0x53, 0x10, 0x06, 0x2a,
	0x6a, 0x0a, 0x0e, 0x43, 0x49, 0x4d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x1b,
	0x0a, 0x17, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x2a, 0xa9, 0x02, 0x0a, 0x0a,
	0x43, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x43,
	0x49, 0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x4d, 0x53,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x4d, 0x53,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x17,
	0x0a, 0x13, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x43, 0x49, 0x4d, 0x5f,
	0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x05,
	0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13,
	0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f,
	0x42, 0x4f, 0x54, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x4d, 0x53,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x50, 0x53, 0x10, 0x08, 0x12, 0x1e, 0x0a,
	0x1a, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x41, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x18, 0x0a,
	0x14, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x56, 0x43, 0x48, 0x41, 0x54, 0x10, 0x0a, 0x2a, 0xc2, 0x02, 0x0a, 0x0c, 0x43, 0x49, 0x4d, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x43, 0x49, 0x4d,
	0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x43, 0x49, 0x4d,
	0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x4d, 0x53,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17,
	0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x43, 0x49,
	0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x52, 0x41,
	0x46, 0x54, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x4d, 0x53, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x63, 0x65,
	0x6c, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x44, 0x10, 0x09,
	0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0a, 0x2a, 0xac, 0x02, 0x0a,
	0x16, 0x43, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x43, 0x49, 0x4d, 0x5f,
	0x4d, 0x53, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x43,
	0x49, 0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x42, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x02, 0x12, 0x24, 0x0a,
	0x20, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4b, 0x49, 0x43,
	0x4b, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x5f,
	0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x43,
	0x49, 0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x44, 0x49, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x10, 0x06, 0x2a, 0x73, 0x0a, 0x14, 0x43,
	0x49, 0x4d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01,
	0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02,
	0x2a, 0x4c, 0x0a, 0x0d, 0x43, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x46, 0x45,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12,
	0x1d, 0x0a, 0x19, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x46, 0x45, 0x41, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x52, 0x4f, 0x41, 0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x02, 0x2a, 0x82,
	0x01, 0x0a, 0x11, 0x43, 0x49, 0x4d, 0x56, 0x6f, 0x69, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x56, 0x4f, 0x49,
	0x50, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x43, 0x49, 0x4d, 0x5f,
	0x56, 0x4f, 0x49, 0x50, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x24, 0x0a,
	0x20, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x56, 0x4f, 0x49, 0x50, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x10, 0x02, 0x2a, 0x9a, 0x01, 0x0a, 0x10, 0x43, 0x49, 0x4d, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x52, 0x73, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x43, 0x49, 0x4d,
	0x5f, 0x56, 0x4f, 0x49, 0x50, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x6b,
	0x43, 0x49, 0x4d, 0x5f, 0x56, 0x4f, 0x49, 0x50, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x64, 0x12, 0x22, 0x0a,
	0x1d, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x56, 0x4f, 0x49, 0x50, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54,
	0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x49, 0x4e, 0x47, 0x49, 0x4e, 0x47, 0x10, 0xb4,
	0x01, 0x12, 0x1d, 0x0a, 0x18, 0x4b, 0x43, 0x49, 0x4d, 0x5f, 0x56, 0x4f, 0x49, 0x50, 0x5f, 0x49,
	0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x4b, 0x10, 0xc8, 0x01,
	0x2a, 0xe2, 0x01, 0x0a, 0x10, 0x43, 0x49, 0x4d, 0x56, 0x6f, 0x69, 0x70, 0x42, 0x79, 0x65, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x56, 0x4f,
	0x49, 0x50, 0x5f, 0x42, 0x59, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x43, 0x49, 0x4d, 0x5f,
	0x56, 0x4f, 0x49, 0x50, 0x5f, 0x42, 0x59, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x43, 0x49, 0x4d,
	0x5f, 0x56, 0x4f, 0x49, 0x50, 0x5f, 0x42, 0x59, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x43, 0x49,
	0x4d, 0x5f, 0x56, 0x4f, 0x49, 0x50, 0x5f, 0x42, 0x59, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x43, 0x49, 0x4d, 0x5f,
	0x56, 0x4f, 0x49, 0x50, 0x5f, 0x42, 0x59, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x42, 0x55, 0x53, 0x59, 0x10, 0x04, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x56,
	0x4f, 0x49, 0x50, 0x5f, 0x42, 0x59, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4f,
	0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x10, 0x05, 0x2a, 0x3d, 0x0a, 0x0a, 0x43, 0x49, 0x4d, 0x52, 0x65, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x6b, 0x43, 0x49, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4f, 0x4b, 0x10, 0x01, 0x42, 0x22, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x66, 0x66,
	0x65, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x48,
	0x03, 0x5a, 0x05, 0x2e, 0x3b, 0x63, 0x69, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_CIM_Def_proto_rawDescOnce sync.Once
	file_CIM_Def_proto_rawDescData = file_CIM_Def_proto_rawDesc
)

func file_CIM_Def_proto_rawDescGZIP() []byte {
	file_CIM_Def_proto_rawDescOnce.Do(func() {
		file_CIM_Def_proto_rawDescData = protoimpl.X.CompressGZIP(file_CIM_Def_proto_rawDescData)
	})
	return file_CIM_Def_proto_rawDescData
}

var file_CIM_Def_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_CIM_Def_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_CIM_Def_proto_goTypes = []interface{}{
	(CIMCmdID)(0),                 // 0: CIM.Def.CIMCmdID
	(CIMIntenralCmdID)(0),         // 1: CIM.Def.CIMIntenralCmdID
	(CIMErrorCode)(0),             // 2: CIM.Def.CIMErrorCode
	(CIMClientType)(0),            // 3: CIM.Def.CIMClientType
	(CIMSessionType)(0),           // 4: CIM.Def.CIMSessionType
	(CIMMsgType)(0),               // 5: CIM.Def.CIMMsgType
	(CIMMsgStatus)(0),             // 6: CIM.Def.CIMMsgStatus
	(CIMMsgNotificationType)(0),   // 7: CIM.Def.CIMMsgNotificationType
	(CIMSessionStatusType)(0),     // 8: CIM.Def.CIMSessionStatusType
	(CIMMsgFeature)(0),            // 9: CIM.Def.CIMMsgFeature
	(CIMVoipInviteType)(0),        // 10: CIM.Def.CIMVoipInviteType
	(CIMInviteRspCode)(0),         // 11: CIM.Def.CIMInviteRspCode
	(CIMVoipByeReason)(0),         // 12: CIM.Def.CIMVoipByeReason
	(CIMResCode)(0),               // 13: CIM.Def.CIMResCode
	(*CIMUserInfo)(nil),           // 14: CIM.Def.CIMUserInfo
	(*CIMContactSessionInfo)(nil), // 15: CIM.Def.CIMContactSessionInfo
	(*CIMMsgInfo)(nil),            // 16: CIM.Def.CIMMsgInfo
	(*CIMChannelInfo)(nil),        // 17: CIM.Def.CIMChannelInfo
}
var file_CIM_Def_proto_depIdxs = []int32{
	4,  // 0: CIM.Def.CIMContactSessionInfo.session_type:type_name -> CIM.Def.CIMSessionType
	8,  // 1: CIM.Def.CIMContactSessionInfo.session_status:type_name -> CIM.Def.CIMSessionStatusType
	5,  // 2: CIM.Def.CIMContactSessionInfo.msg_type:type_name -> CIM.Def.CIMMsgType
	6,  // 3: CIM.Def.CIMContactSessionInfo.msg_status:type_name -> CIM.Def.CIMMsgStatus
	13, // 4: CIM.Def.CIMMsgInfo.msg_res_code:type_name -> CIM.Def.CIMResCode
	9,  // 5: CIM.Def.CIMMsgInfo.msg_feature:type_name -> CIM.Def.CIMMsgFeature
	4,  // 6: CIM.Def.CIMMsgInfo.session_type:type_name -> CIM.Def.CIMSessionType
	5,  // 7: CIM.Def.CIMMsgInfo.msg_type:type_name -> CIM.Def.CIMMsgType
	6,  // 8: CIM.Def.CIMMsgInfo.msg_status:type_name -> CIM.Def.CIMMsgStatus
	3,  // 9: CIM.Def.CIMMsgInfo.sender_client_type:type_name -> CIM.Def.CIMClientType
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_CIM_Def_proto_init() }
func file_CIM_Def_proto_init() {
	if File_CIM_Def_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_CIM_Def_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CIMUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CIM_Def_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CIMContactSessionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CIM_Def_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CIMMsgInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CIM_Def_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CIMChannelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_CIM_Def_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_CIM_Def_proto_goTypes,
		DependencyIndexes: file_CIM_Def_proto_depIdxs,
		EnumInfos:         file_CIM_Def_proto_enumTypes,
		MessageInfos:      file_CIM_Def_proto_msgTypes,
	}.Build()
	File_CIM_Def_proto = out.File
	file_CIM_Def_proto_rawDesc = nil
	file_CIM_Def_proto_goTypes = nil
	file_CIM_Def_proto_depIdxs = nil
}
