// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: Grpc.Logic.proto

package cim

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_Grpc_Logic_proto protoreflect.FileDescriptor

var file_Grpc_Logic_proto_rawDesc = []byte{
	0x0a, 0x10, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x08, 0x43, 0x49, 0x4d, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x1a, 0x0e, 0x43, 0x49,
	0x4d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x43, 0x49,
	0x4d, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x43,
	0x49, 0x4d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0f, 0x43, 0x49, 0x4d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x10, 0x43, 0x49, 0x4d, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x66, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x32, 0xbf, 0x0c, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x12, 0x2e, 0x0a,
	0x08, 0x53, 0x61, 0x79, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x0f, 0x2e, 0x43, 0x49, 0x4d, 0x2e,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x1a, 0x0f, 0x2e, 0x43, 0x49, 0x4d,
	0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a,
	0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x2e, 0x43, 0x49, 0x4d, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x1a, 0x17,
	0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x49, 0x4d, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x09, 0x41, 0x75, 0x74,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x2e, 0x43, 0x49, 0x4d, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x43,
	0x49, 0x4d, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x36, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12, 0x15, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x49, 0x4d, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x1a,
	0x15, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x49, 0x4d, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x43, 0x49, 0x4d, 0x52,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x2e, 0x43, 0x49, 0x4d, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x46,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x43,
	0x49, 0x4d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x43, 0x49, 0x4d, 0x47, 0x65, 0x74, 0x4d, 0x73,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x2e, 0x43, 0x49, 0x4d, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x43, 0x49, 0x4d, 0x4d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x1a,
	0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x49, 0x4d,
	0x4d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0e,
	0x52, 0x65, 0x61, 0x64, 0x41, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e,
	0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x49, 0x4d,
	0x4d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x61, 0x64, 0x41, 0x63, 0x6b, 0x1a, 0x0f,
	0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x56, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x22, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x11, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e,
	0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x6b, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x2e,
	0x43, 0x49, 0x4d, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x49, 0x4d, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x2e, 0x43, 0x49, 0x4d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x52, 0x0a,
	0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1d, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x4b, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x1c, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x49, 0x4d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x49, 0x4d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x57,
	0x0a, 0x0f, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x20, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x49,
	0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x43, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x45, 0x78, 0x69, 0x74, 0x12, 0x1a, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x43, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x1a, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x49, 0x4d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x69, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4a,
	0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1a, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x49, 0x4d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x43,
	0x49, 0x4d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x14, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x20, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43,
	0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x43, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x2e, 0x43, 0x49, 0x4d,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x43, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x43, 0x49, 0x4d, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e,
	0x43, 0x49, 0x4d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x49, 0x4d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x69, 0x63, 0x6b,
	0x4f, 0x75, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x43, 0x49, 0x4d, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x69,
	0x63, 0x6b, 0x4f, 0x75, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x23,
	0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x49, 0x4d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x73, 0x70, 0x22, 0x00, 0x42, 0x09, 0x48, 0x03, 0x5a, 0x05, 0x2e, 0x3b, 0x63, 0x69, 0x6d,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_Grpc_Logic_proto_goTypes = []interface{}{
	(*Hello)(nil),                      // 0: CIM.Grpc.Hello
	(*CIMHeartBeat)(nil),               // 1: CIM.Login.CIMHeartBeat
	(*CIMAuthTokenReq)(nil),            // 2: CIM.Login.CIMAuthTokenReq
	(*CIMAuthReq)(nil),                 // 3: CIM.Login.CIMAuthReq
	(*CIMRecentContactSessionReq)(nil), // 4: CIM.List.CIMRecentContactSessionReq
	(*CIMGetMsgListReq)(nil),           // 5: CIM.List.CIMGetMsgListReq
	(*CIMMsgData)(nil),                 // 6: CIM.Message.CIMMsgData
	(*CIMMsgDataReadAck)(nil),          // 7: CIM.Message.CIMMsgDataReadAck
	(*CreateUserAccountInfoReq)(nil),   // 8: CIM.Grpc.CreateUserAccountInfoReq
	(*QueryUserNickNameReq)(nil),       // 9: CIM.Grpc.QueryUserNickNameReq
	(*CIMFriendQueryUserListReq)(nil),  // 10: CIM.Friend.CIMFriendQueryUserListReq
	(*GenerateNickNameReq)(nil),        // 11: CIM.Grpc.GenerateNickNameReq
	(*CIMGroupCreateReq)(nil),          // 12: CIM.Group.CIMGroupCreateReq
	(*CIMGroupDisbandingReq)(nil),      // 13: CIM.Group.CIMGroupDisbandingReq
	(*CIMGroupExitReq)(nil),            // 14: CIM.Group.CIMGroupExitReq
	(*CIMGroupListReq)(nil),            // 15: CIM.Group.CIMGroupListReq
	(*CIMGroupMemberListReq)(nil),      // 16: CIM.Group.CIMGroupMemberListReq
	(*CIMGroupInfoReq)(nil),            // 17: CIM.Group.CIMGroupInfoReq
	(*CIMGroupInviteMemberReq)(nil),    // 18: CIM.Group.CIMGroupInviteMemberReq
	(*CIMGroupKickOutMemberReq)(nil),   // 19: CIM.Group.CIMGroupKickOutMemberReq
	(*Empty)(nil),                      // 20: CIM.Grpc.Empty
	(*CIMAuthTokenRsp)(nil),            // 21: CIM.Login.CIMAuthTokenRsp
	(*CIMAuthRsp)(nil),                 // 22: CIM.Login.CIMAuthRsp
	(*CIMRecentContactSessionRsp)(nil), // 23: CIM.List.CIMRecentContactSessionRsp
	(*CIMGetMsgListRsp)(nil),           // 24: CIM.List.CIMGetMsgListRsp
	(*CIMMsgDataAck)(nil),              // 25: CIM.Message.CIMMsgDataAck
	(*CreateUserAccountInfoRsp)(nil),   // 26: CIM.Grpc.CreateUserAccountInfoRsp
	(*QueryUserNickNameRsp)(nil),       // 27: CIM.Grpc.QueryUserNickNameRsp
	(*CIMFriendQueryUserListRsp)(nil),  // 28: CIM.Friend.CIMFriendQueryUserListRsp
	(*GenerateNickNameRsp)(nil),        // 29: CIM.Grpc.GenerateNickNameRsp
	(*CIMGroupCreateRsp)(nil),          // 30: CIM.Group.CIMGroupCreateRsp
	(*CIMGroupDisbandingRsp)(nil),      // 31: CIM.Group.CIMGroupDisbandingRsp
	(*CIMGroupExitRsp)(nil),            // 32: CIM.Group.CIMGroupExitRsp
	(*CIMGroupListRsp)(nil),            // 33: CIM.Group.CIMGroupListRsp
	(*CIMGroupMemberListRsp)(nil),      // 34: CIM.Group.CIMGroupMemberListRsp
	(*CIMGroupInfoRsp)(nil),            // 35: CIM.Group.CIMGroupInfoRsp
	(*CIMGroupInviteMemberRsp)(nil),    // 36: CIM.Group.CIMGroupInviteMemberRsp
	(*CIMGroupKickOutMemberRsp)(nil),   // 37: CIM.Group.CIMGroupKickOutMemberRsp
}
var file_Grpc_Logic_proto_depIdxs = []int32{
	0,  // 0: CIM.Grpc.Logic.SayHello:input_type -> CIM.Grpc.Hello
	1,  // 1: CIM.Grpc.Logic.Ping:input_type -> CIM.Login.CIMHeartBeat
	2,  // 2: CIM.Grpc.Logic.AuthToken:input_type -> CIM.Login.CIMAuthTokenReq
	3,  // 3: CIM.Grpc.Logic.Auth:input_type -> CIM.Login.CIMAuthReq
	4,  // 4: CIM.Grpc.Logic.RecentContactSession:input_type -> CIM.List.CIMRecentContactSessionReq
	5,  // 5: CIM.Grpc.Logic.GetMsgList:input_type -> CIM.List.CIMGetMsgListReq
	6,  // 6: CIM.Grpc.Logic.SendMsgData:input_type -> CIM.Message.CIMMsgData
	7,  // 7: CIM.Grpc.Logic.ReadAckMsgData:input_type -> CIM.Message.CIMMsgDataReadAck
	8,  // 8: CIM.Grpc.Logic.CreateUser:input_type -> CIM.Grpc.CreateUserAccountInfoReq
	9,  // 9: CIM.Grpc.Logic.QueryUserNickName:input_type -> CIM.Grpc.QueryUserNickNameReq
	10, // 10: CIM.Grpc.Logic.QuerySystemUserRandomList:input_type -> CIM.Friend.CIMFriendQueryUserListReq
	11, // 11: CIM.Grpc.Logic.GenerateNickName:input_type -> CIM.Grpc.GenerateNickNameReq
	12, // 12: CIM.Grpc.Logic.CreateGroup:input_type -> CIM.Group.CIMGroupCreateReq
	13, // 13: CIM.Grpc.Logic.DisbandingGroup:input_type -> CIM.Group.CIMGroupDisbandingReq
	14, // 14: CIM.Grpc.Logic.GroupExit:input_type -> CIM.Group.CIMGroupExitReq
	15, // 15: CIM.Grpc.Logic.QueryGroupList:input_type -> CIM.Group.CIMGroupListReq
	16, // 16: CIM.Grpc.Logic.QueryGroupMemberList:input_type -> CIM.Group.CIMGroupMemberListReq
	17, // 17: CIM.Grpc.Logic.QueryGroupInfo:input_type -> CIM.Group.CIMGroupInfoReq
	18, // 18: CIM.Grpc.Logic.GroupInviteMember:input_type -> CIM.Group.CIMGroupInviteMemberReq
	19, // 19: CIM.Grpc.Logic.GroupKickOutMember:input_type -> CIM.Group.CIMGroupKickOutMemberReq
	20, // 20: CIM.Grpc.Logic.SayHello:output_type -> CIM.Grpc.Empty
	1,  // 21: CIM.Grpc.Logic.Ping:output_type -> CIM.Login.CIMHeartBeat
	21, // 22: CIM.Grpc.Logic.AuthToken:output_type -> CIM.Login.CIMAuthTokenRsp
	22, // 23: CIM.Grpc.Logic.Auth:output_type -> CIM.Login.CIMAuthRsp
	23, // 24: CIM.Grpc.Logic.RecentContactSession:output_type -> CIM.List.CIMRecentContactSessionRsp
	24, // 25: CIM.Grpc.Logic.GetMsgList:output_type -> CIM.List.CIMGetMsgListRsp
	25, // 26: CIM.Grpc.Logic.SendMsgData:output_type -> CIM.Message.CIMMsgDataAck
	20, // 27: CIM.Grpc.Logic.ReadAckMsgData:output_type -> CIM.Grpc.Empty
	26, // 28: CIM.Grpc.Logic.CreateUser:output_type -> CIM.Grpc.CreateUserAccountInfoRsp
	27, // 29: CIM.Grpc.Logic.QueryUserNickName:output_type -> CIM.Grpc.QueryUserNickNameRsp
	28, // 30: CIM.Grpc.Logic.QuerySystemUserRandomList:output_type -> CIM.Friend.CIMFriendQueryUserListRsp
	29, // 31: CIM.Grpc.Logic.GenerateNickName:output_type -> CIM.Grpc.GenerateNickNameRsp
	30, // 32: CIM.Grpc.Logic.CreateGroup:output_type -> CIM.Group.CIMGroupCreateRsp
	31, // 33: CIM.Grpc.Logic.DisbandingGroup:output_type -> CIM.Group.CIMGroupDisbandingRsp
	32, // 34: CIM.Grpc.Logic.GroupExit:output_type -> CIM.Group.CIMGroupExitRsp
	33, // 35: CIM.Grpc.Logic.QueryGroupList:output_type -> CIM.Group.CIMGroupListRsp
	34, // 36: CIM.Grpc.Logic.QueryGroupMemberList:output_type -> CIM.Group.CIMGroupMemberListRsp
	35, // 37: CIM.Grpc.Logic.QueryGroupInfo:output_type -> CIM.Group.CIMGroupInfoRsp
	36, // 38: CIM.Grpc.Logic.GroupInviteMember:output_type -> CIM.Group.CIMGroupInviteMemberRsp
	37, // 39: CIM.Grpc.Logic.GroupKickOutMember:output_type -> CIM.Group.CIMGroupKickOutMemberRsp
	20, // [20:40] is the sub-list for method output_type
	0,  // [0:20] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_Grpc_Logic_proto_init() }
func file_Grpc_Logic_proto_init() {
	if File_Grpc_Logic_proto != nil {
		return
	}
	file_CIM_List_proto_init()
	file_CIM_Login_proto_init()
	file_CIM_Message_proto_init()
	file_CIM_Group_proto_init()
	file_CIM_Friend_proto_init()
	file_Grpc_Def_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Grpc_Logic_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_Grpc_Logic_proto_goTypes,
		DependencyIndexes: file_Grpc_Logic_proto_depIdxs,
	}.Build()
	File_Grpc_Logic_proto = out.File
	file_Grpc_Logic_proto_rawDesc = nil
	file_Grpc_Logic_proto_goTypes = nil
	file_Grpc_Logic_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LogicClient is the client API for Logic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogicClient interface {
	// 传递我方信息，双向GRPC
	SayHello(ctx context.Context, in *Hello, opts ...grpc.CallOption) (*Empty, error)
	// ping
	Ping(ctx context.Context, in *CIMHeartBeat, opts ...grpc.CallOption) (*CIMHeartBeat, error)
	// 验证token
	AuthToken(ctx context.Context, in *CIMAuthTokenReq, opts ...grpc.CallOption) (*CIMAuthTokenRsp, error)
	// 验证用户名和密码
	Auth(ctx context.Context, in *CIMAuthReq, opts ...grpc.CallOption) (*CIMAuthRsp, error)
	// 查询会话列表
	RecentContactSession(ctx context.Context, in *CIMRecentContactSessionReq, opts ...grpc.CallOption) (*CIMRecentContactSessionRsp, error)
	// 查询历史消息列表
	GetMsgList(ctx context.Context, in *CIMGetMsgListReq, opts ...grpc.CallOption) (*CIMGetMsgListRsp, error)
	// 发消息
	SendMsgData(ctx context.Context, in *CIMMsgData, opts ...grpc.CallOption) (*CIMMsgDataAck, error)
	// 已读消息回执
	ReadAckMsgData(ctx context.Context, in *CIMMsgDataReadAck, opts ...grpc.CallOption) (*Empty, error)
	// 创建用户
	CreateUser(ctx context.Context, in *CreateUserAccountInfoReq, opts ...grpc.CallOption) (*CreateUserAccountInfoRsp, error)
	// 查询用户昵称
	QueryUserNickName(ctx context.Context, in *QueryUserNickNameReq, opts ...grpc.CallOption) (*QueryUserNickNameRsp, error)
	// 查询随机推荐的系统已注册用户列表
	QuerySystemUserRandomList(ctx context.Context, in *CIMFriendQueryUserListReq, opts ...grpc.CallOption) (*CIMFriendQueryUserListRsp, error)
	// 生成随机昵称
	GenerateNickName(ctx context.Context, in *GenerateNickNameReq, opts ...grpc.CallOption) (*GenerateNickNameRsp, error)
	// 创建群
	CreateGroup(ctx context.Context, in *CIMGroupCreateReq, opts ...grpc.CallOption) (*CIMGroupCreateRsp, error)
	// 解散群
	DisbandingGroup(ctx context.Context, in *CIMGroupDisbandingReq, opts ...grpc.CallOption) (*CIMGroupDisbandingRsp, error)
	// 退出群
	GroupExit(ctx context.Context, in *CIMGroupExitReq, opts ...grpc.CallOption) (*CIMGroupExitRsp, error)
	// 查询群列表
	QueryGroupList(ctx context.Context, in *CIMGroupListReq, opts ...grpc.CallOption) (*CIMGroupListRsp, error)
	// 查询群组成员列表
	QueryGroupMemberList(ctx context.Context, in *CIMGroupMemberListReq, opts ...grpc.CallOption) (*CIMGroupMemberListRsp, error)
	// 查询群详情
	QueryGroupInfo(ctx context.Context, in *CIMGroupInfoReq, opts ...grpc.CallOption) (*CIMGroupInfoRsp, error)
	// 加人
	GroupInviteMember(ctx context.Context, in *CIMGroupInviteMemberReq, opts ...grpc.CallOption) (*CIMGroupInviteMemberRsp, error)
	// 踢人
	GroupKickOutMember(ctx context.Context, in *CIMGroupKickOutMemberReq, opts ...grpc.CallOption) (*CIMGroupKickOutMemberRsp, error)
}

type logicClient struct {
	cc grpc.ClientConnInterface
}

func NewLogicClient(cc grpc.ClientConnInterface) LogicClient {
	return &logicClient{cc}
}

func (c *logicClient) SayHello(ctx context.Context, in *Hello, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) Ping(ctx context.Context, in *CIMHeartBeat, opts ...grpc.CallOption) (*CIMHeartBeat, error) {
	out := new(CIMHeartBeat)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) AuthToken(ctx context.Context, in *CIMAuthTokenReq, opts ...grpc.CallOption) (*CIMAuthTokenRsp, error) {
	out := new(CIMAuthTokenRsp)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/AuthToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) Auth(ctx context.Context, in *CIMAuthReq, opts ...grpc.CallOption) (*CIMAuthRsp, error) {
	out := new(CIMAuthRsp)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) RecentContactSession(ctx context.Context, in *CIMRecentContactSessionReq, opts ...grpc.CallOption) (*CIMRecentContactSessionRsp, error) {
	out := new(CIMRecentContactSessionRsp)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/RecentContactSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) GetMsgList(ctx context.Context, in *CIMGetMsgListReq, opts ...grpc.CallOption) (*CIMGetMsgListRsp, error) {
	out := new(CIMGetMsgListRsp)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/GetMsgList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) SendMsgData(ctx context.Context, in *CIMMsgData, opts ...grpc.CallOption) (*CIMMsgDataAck, error) {
	out := new(CIMMsgDataAck)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/SendMsgData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) ReadAckMsgData(ctx context.Context, in *CIMMsgDataReadAck, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/ReadAckMsgData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) CreateUser(ctx context.Context, in *CreateUserAccountInfoReq, opts ...grpc.CallOption) (*CreateUserAccountInfoRsp, error) {
	out := new(CreateUserAccountInfoRsp)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) QueryUserNickName(ctx context.Context, in *QueryUserNickNameReq, opts ...grpc.CallOption) (*QueryUserNickNameRsp, error) {
	out := new(QueryUserNickNameRsp)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/QueryUserNickName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) QuerySystemUserRandomList(ctx context.Context, in *CIMFriendQueryUserListReq, opts ...grpc.CallOption) (*CIMFriendQueryUserListRsp, error) {
	out := new(CIMFriendQueryUserListRsp)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/QuerySystemUserRandomList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) GenerateNickName(ctx context.Context, in *GenerateNickNameReq, opts ...grpc.CallOption) (*GenerateNickNameRsp, error) {
	out := new(GenerateNickNameRsp)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/GenerateNickName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) CreateGroup(ctx context.Context, in *CIMGroupCreateReq, opts ...grpc.CallOption) (*CIMGroupCreateRsp, error) {
	out := new(CIMGroupCreateRsp)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) DisbandingGroup(ctx context.Context, in *CIMGroupDisbandingReq, opts ...grpc.CallOption) (*CIMGroupDisbandingRsp, error) {
	out := new(CIMGroupDisbandingRsp)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/DisbandingGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) GroupExit(ctx context.Context, in *CIMGroupExitReq, opts ...grpc.CallOption) (*CIMGroupExitRsp, error) {
	out := new(CIMGroupExitRsp)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/GroupExit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) QueryGroupList(ctx context.Context, in *CIMGroupListReq, opts ...grpc.CallOption) (*CIMGroupListRsp, error) {
	out := new(CIMGroupListRsp)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/QueryGroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) QueryGroupMemberList(ctx context.Context, in *CIMGroupMemberListReq, opts ...grpc.CallOption) (*CIMGroupMemberListRsp, error) {
	out := new(CIMGroupMemberListRsp)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/QueryGroupMemberList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) QueryGroupInfo(ctx context.Context, in *CIMGroupInfoReq, opts ...grpc.CallOption) (*CIMGroupInfoRsp, error) {
	out := new(CIMGroupInfoRsp)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/QueryGroupInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) GroupInviteMember(ctx context.Context, in *CIMGroupInviteMemberReq, opts ...grpc.CallOption) (*CIMGroupInviteMemberRsp, error) {
	out := new(CIMGroupInviteMemberRsp)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/GroupInviteMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) GroupKickOutMember(ctx context.Context, in *CIMGroupKickOutMemberReq, opts ...grpc.CallOption) (*CIMGroupKickOutMemberRsp, error) {
	out := new(CIMGroupKickOutMemberRsp)
	err := c.cc.Invoke(ctx, "/CIM.Grpc.Logic/GroupKickOutMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogicServer is the server API for Logic service.
type LogicServer interface {
	// 传递我方信息，双向GRPC
	SayHello(context.Context, *Hello) (*Empty, error)
	// ping
	Ping(context.Context, *CIMHeartBeat) (*CIMHeartBeat, error)
	// 验证token
	AuthToken(context.Context, *CIMAuthTokenReq) (*CIMAuthTokenRsp, error)
	// 验证用户名和密码
	Auth(context.Context, *CIMAuthReq) (*CIMAuthRsp, error)
	// 查询会话列表
	RecentContactSession(context.Context, *CIMRecentContactSessionReq) (*CIMRecentContactSessionRsp, error)
	// 查询历史消息列表
	GetMsgList(context.Context, *CIMGetMsgListReq) (*CIMGetMsgListRsp, error)
	// 发消息
	SendMsgData(context.Context, *CIMMsgData) (*CIMMsgDataAck, error)
	// 已读消息回执
	ReadAckMsgData(context.Context, *CIMMsgDataReadAck) (*Empty, error)
	// 创建用户
	CreateUser(context.Context, *CreateUserAccountInfoReq) (*CreateUserAccountInfoRsp, error)
	// 查询用户昵称
	QueryUserNickName(context.Context, *QueryUserNickNameReq) (*QueryUserNickNameRsp, error)
	// 查询随机推荐的系统已注册用户列表
	QuerySystemUserRandomList(context.Context, *CIMFriendQueryUserListReq) (*CIMFriendQueryUserListRsp, error)
	// 生成随机昵称
	GenerateNickName(context.Context, *GenerateNickNameReq) (*GenerateNickNameRsp, error)
	// 创建群
	CreateGroup(context.Context, *CIMGroupCreateReq) (*CIMGroupCreateRsp, error)
	// 解散群
	DisbandingGroup(context.Context, *CIMGroupDisbandingReq) (*CIMGroupDisbandingRsp, error)
	// 退出群
	GroupExit(context.Context, *CIMGroupExitReq) (*CIMGroupExitRsp, error)
	// 查询群列表
	QueryGroupList(context.Context, *CIMGroupListReq) (*CIMGroupListRsp, error)
	// 查询群组成员列表
	QueryGroupMemberList(context.Context, *CIMGroupMemberListReq) (*CIMGroupMemberListRsp, error)
	// 查询群详情
	QueryGroupInfo(context.Context, *CIMGroupInfoReq) (*CIMGroupInfoRsp, error)
	// 加人
	GroupInviteMember(context.Context, *CIMGroupInviteMemberReq) (*CIMGroupInviteMemberRsp, error)
	// 踢人
	GroupKickOutMember(context.Context, *CIMGroupKickOutMemberReq) (*CIMGroupKickOutMemberRsp, error)
}

// UnimplementedLogicServer can be embedded to have forward compatible implementations.
type UnimplementedLogicServer struct {
}

func (*UnimplementedLogicServer) SayHello(context.Context, *Hello) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (*UnimplementedLogicServer) Ping(context.Context, *CIMHeartBeat) (*CIMHeartBeat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedLogicServer) AuthToken(context.Context, *CIMAuthTokenReq) (*CIMAuthTokenRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthToken not implemented")
}
func (*UnimplementedLogicServer) Auth(context.Context, *CIMAuthReq) (*CIMAuthRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (*UnimplementedLogicServer) RecentContactSession(context.Context, *CIMRecentContactSessionReq) (*CIMRecentContactSessionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecentContactSession not implemented")
}
func (*UnimplementedLogicServer) GetMsgList(context.Context, *CIMGetMsgListReq) (*CIMGetMsgListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMsgList not implemented")
}
func (*UnimplementedLogicServer) SendMsgData(context.Context, *CIMMsgData) (*CIMMsgDataAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsgData not implemented")
}
func (*UnimplementedLogicServer) ReadAckMsgData(context.Context, *CIMMsgDataReadAck) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAckMsgData not implemented")
}
func (*UnimplementedLogicServer) CreateUser(context.Context, *CreateUserAccountInfoReq) (*CreateUserAccountInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedLogicServer) QueryUserNickName(context.Context, *QueryUserNickNameReq) (*QueryUserNickNameRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserNickName not implemented")
}
func (*UnimplementedLogicServer) QuerySystemUserRandomList(context.Context, *CIMFriendQueryUserListReq) (*CIMFriendQueryUserListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySystemUserRandomList not implemented")
}
func (*UnimplementedLogicServer) GenerateNickName(context.Context, *GenerateNickNameReq) (*GenerateNickNameRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateNickName not implemented")
}
func (*UnimplementedLogicServer) CreateGroup(context.Context, *CIMGroupCreateReq) (*CIMGroupCreateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (*UnimplementedLogicServer) DisbandingGroup(context.Context, *CIMGroupDisbandingReq) (*CIMGroupDisbandingRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisbandingGroup not implemented")
}
func (*UnimplementedLogicServer) GroupExit(context.Context, *CIMGroupExitReq) (*CIMGroupExitRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupExit not implemented")
}
func (*UnimplementedLogicServer) QueryGroupList(context.Context, *CIMGroupListReq) (*CIMGroupListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGroupList not implemented")
}
func (*UnimplementedLogicServer) QueryGroupMemberList(context.Context, *CIMGroupMemberListReq) (*CIMGroupMemberListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGroupMemberList not implemented")
}
func (*UnimplementedLogicServer) QueryGroupInfo(context.Context, *CIMGroupInfoReq) (*CIMGroupInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGroupInfo not implemented")
}
func (*UnimplementedLogicServer) GroupInviteMember(context.Context, *CIMGroupInviteMemberReq) (*CIMGroupInviteMemberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupInviteMember not implemented")
}
func (*UnimplementedLogicServer) GroupKickOutMember(context.Context, *CIMGroupKickOutMemberReq) (*CIMGroupKickOutMemberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupKickOutMember not implemented")
}

func RegisterLogicServer(s *grpc.Server, srv LogicServer) {
	s.RegisterService(&_Logic_serviceDesc, srv)
}

func _Logic_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hello)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).SayHello(ctx, req.(*Hello))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIMHeartBeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).Ping(ctx, req.(*CIMHeartBeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_AuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIMAuthTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).AuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/AuthToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).AuthToken(ctx, req.(*CIMAuthTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIMAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).Auth(ctx, req.(*CIMAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_RecentContactSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIMRecentContactSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).RecentContactSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/RecentContactSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).RecentContactSession(ctx, req.(*CIMRecentContactSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_GetMsgList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIMGetMsgListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).GetMsgList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/GetMsgList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).GetMsgList(ctx, req.(*CIMGetMsgListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_SendMsgData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIMMsgData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).SendMsgData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/SendMsgData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).SendMsgData(ctx, req.(*CIMMsgData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_ReadAckMsgData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIMMsgDataReadAck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).ReadAckMsgData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/ReadAckMsgData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).ReadAckMsgData(ctx, req.(*CIMMsgDataReadAck))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserAccountInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).CreateUser(ctx, req.(*CreateUserAccountInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_QueryUserNickName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserNickNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).QueryUserNickName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/QueryUserNickName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).QueryUserNickName(ctx, req.(*QueryUserNickNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_QuerySystemUserRandomList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIMFriendQueryUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).QuerySystemUserRandomList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/QuerySystemUserRandomList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).QuerySystemUserRandomList(ctx, req.(*CIMFriendQueryUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_GenerateNickName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateNickNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).GenerateNickName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/GenerateNickName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).GenerateNickName(ctx, req.(*GenerateNickNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIMGroupCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).CreateGroup(ctx, req.(*CIMGroupCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_DisbandingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIMGroupDisbandingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).DisbandingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/DisbandingGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).DisbandingGroup(ctx, req.(*CIMGroupDisbandingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_GroupExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIMGroupExitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).GroupExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/GroupExit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).GroupExit(ctx, req.(*CIMGroupExitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_QueryGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIMGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).QueryGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/QueryGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).QueryGroupList(ctx, req.(*CIMGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_QueryGroupMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIMGroupMemberListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).QueryGroupMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/QueryGroupMemberList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).QueryGroupMemberList(ctx, req.(*CIMGroupMemberListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_QueryGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIMGroupInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).QueryGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/QueryGroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).QueryGroupInfo(ctx, req.(*CIMGroupInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_GroupInviteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIMGroupInviteMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).GroupInviteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/GroupInviteMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).GroupInviteMember(ctx, req.(*CIMGroupInviteMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_GroupKickOutMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIMGroupKickOutMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).GroupKickOutMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIM.Grpc.Logic/GroupKickOutMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).GroupKickOutMember(ctx, req.(*CIMGroupKickOutMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Logic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CIM.Grpc.Logic",
	HandlerType: (*LogicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Logic_SayHello_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Logic_Ping_Handler,
		},
		{
			MethodName: "AuthToken",
			Handler:    _Logic_AuthToken_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _Logic_Auth_Handler,
		},
		{
			MethodName: "RecentContactSession",
			Handler:    _Logic_RecentContactSession_Handler,
		},
		{
			MethodName: "GetMsgList",
			Handler:    _Logic_GetMsgList_Handler,
		},
		{
			MethodName: "SendMsgData",
			Handler:    _Logic_SendMsgData_Handler,
		},
		{
			MethodName: "ReadAckMsgData",
			Handler:    _Logic_ReadAckMsgData_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Logic_CreateUser_Handler,
		},
		{
			MethodName: "QueryUserNickName",
			Handler:    _Logic_QueryUserNickName_Handler,
		},
		{
			MethodName: "QuerySystemUserRandomList",
			Handler:    _Logic_QuerySystemUserRandomList_Handler,
		},
		{
			MethodName: "GenerateNickName",
			Handler:    _Logic_GenerateNickName_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Logic_CreateGroup_Handler,
		},
		{
			MethodName: "DisbandingGroup",
			Handler:    _Logic_DisbandingGroup_Handler,
		},
		{
			MethodName: "GroupExit",
			Handler:    _Logic_GroupExit_Handler,
		},
		{
			MethodName: "QueryGroupList",
			Handler:    _Logic_QueryGroupList_Handler,
		},
		{
			MethodName: "QueryGroupMemberList",
			Handler:    _Logic_QueryGroupMemberList_Handler,
		},
		{
			MethodName: "QueryGroupInfo",
			Handler:    _Logic_QueryGroupInfo_Handler,
		},
		{
			MethodName: "GroupInviteMember",
			Handler:    _Logic_GroupInviteMember_Handler,
		},
		{
			MethodName: "GroupKickOutMember",
			Handler:    _Logic_GroupKickOutMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Grpc.Logic.proto",
}
