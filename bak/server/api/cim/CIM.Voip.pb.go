// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: CIM.Voip.proto

package cim

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 音视频呼叫邀请
type CIMVoipInviteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cmd id:		0x0401
	CreatorUserId  uint64            `protobuf:"varint,1,opt,name=creator_user_id,json=creatorUserId,proto3" json:"creator_user_id,omitempty"`                     // 邀请方
	InviteUserList []uint64          `protobuf:"varint,2,rep,packed,name=invite_user_list,json=inviteUserList,proto3" json:"invite_user_list,omitempty"`           // 被邀请方列表，如果是一对一，无需设置
	InviteType     CIMVoipInviteType `protobuf:"varint,3,opt,name=invite_type,json=inviteType,proto3,enum=CIM.Def.CIMVoipInviteType" json:"invite_type,omitempty"` // 通话类型
	ChannelInfo    *CIMChannelInfo   `protobuf:"bytes,4,opt,name=channel_info,json=channelInfo,proto3" json:"channel_info,omitempty"`                              // 频道信息，由服务端分配
}

func (x *CIMVoipInviteReq) Reset() {
	*x = CIMVoipInviteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CIM_Voip_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CIMVoipInviteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CIMVoipInviteReq) ProtoMessage() {}

func (x *CIMVoipInviteReq) ProtoReflect() protoreflect.Message {
	mi := &file_CIM_Voip_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CIMVoipInviteReq.ProtoReflect.Descriptor instead.
func (*CIMVoipInviteReq) Descriptor() ([]byte, []int) {
	return file_CIM_Voip_proto_rawDescGZIP(), []int{0}
}

func (x *CIMVoipInviteReq) GetCreatorUserId() uint64 {
	if x != nil {
		return x.CreatorUserId
	}
	return 0
}

func (x *CIMVoipInviteReq) GetInviteUserList() []uint64 {
	if x != nil {
		return x.InviteUserList
	}
	return nil
}

func (x *CIMVoipInviteReq) GetInviteType() CIMVoipInviteType {
	if x != nil {
		return x.InviteType
	}
	return CIMVoipInviteType_kCIM_VOIP_INVITE_TYPE_UNKNOWN
}

func (x *CIMVoipInviteReq) GetChannelInfo() *CIMChannelInfo {
	if x != nil {
		return x.ChannelInfo
	}
	return nil
}

// 音视频呼叫应答状态
type CIMVoipInviteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cmd id:		0x0402
	UserId      uint64           `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                  // 应答用户，如果是0且rsp_code=100，代表系统应答
	RspCode     CIMInviteRspCode `protobuf:"varint,2,opt,name=rsp_code,json=rspCode,proto3,enum=CIM.Def.CIMInviteRspCode" json:"rsp_code,omitempty"` // 当前状态
	ChannelInfo *CIMChannelInfo  `protobuf:"bytes,3,opt,name=channel_info,json=channelInfo,proto3" json:"channel_info,omitempty"`                    // 频道信息，由服务端分配
}

func (x *CIMVoipInviteReply) Reset() {
	*x = CIMVoipInviteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CIM_Voip_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CIMVoipInviteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CIMVoipInviteReply) ProtoMessage() {}

func (x *CIMVoipInviteReply) ProtoReflect() protoreflect.Message {
	mi := &file_CIM_Voip_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CIMVoipInviteReply.ProtoReflect.Descriptor instead.
func (*CIMVoipInviteReply) Descriptor() ([]byte, []int) {
	return file_CIM_Voip_proto_rawDescGZIP(), []int{1}
}

func (x *CIMVoipInviteReply) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CIMVoipInviteReply) GetRspCode() CIMInviteRspCode {
	if x != nil {
		return x.RspCode
	}
	return CIMInviteRspCode_kCIM_VOIP_INVITE_CODE_UNKNOWN
}

func (x *CIMVoipInviteReply) GetChannelInfo() *CIMChannelInfo {
	if x != nil {
		return x.ChannelInfo
	}
	return nil
}

// 音视频呼叫ACK
// 100 Trying->180 Ringing->200 Ok->ACK(this message)
type CIMVoipInviteReplyAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelInfo *CIMChannelInfo `protobuf:"bytes,1,opt,name=channel_info,json=channelInfo,proto3" json:"channel_info,omitempty"` // 频道信息，由服务端分配
}

func (x *CIMVoipInviteReplyAck) Reset() {
	*x = CIMVoipInviteReplyAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CIM_Voip_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CIMVoipInviteReplyAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CIMVoipInviteReplyAck) ProtoMessage() {}

func (x *CIMVoipInviteReplyAck) ProtoReflect() protoreflect.Message {
	mi := &file_CIM_Voip_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CIMVoipInviteReplyAck.ProtoReflect.Descriptor instead.
func (*CIMVoipInviteReplyAck) Descriptor() ([]byte, []int) {
	return file_CIM_Voip_proto_rawDescGZIP(), []int{2}
}

func (x *CIMVoipInviteReplyAck) GetChannelInfo() *CIMChannelInfo {
	if x != nil {
		return x.ChannelInfo
	}
	return nil
}

// 心跳
type CIMVoipHeartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CIMVoipHeartbeat) Reset() {
	*x = CIMVoipHeartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CIM_Voip_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CIMVoipHeartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CIMVoipHeartbeat) ProtoMessage() {}

func (x *CIMVoipHeartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_CIM_Voip_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CIMVoipHeartbeat.ProtoReflect.Descriptor instead.
func (*CIMVoipHeartbeat) Descriptor() ([]byte, []int) {
	return file_CIM_Voip_proto_rawDescGZIP(), []int{3}
}

// 挂断请求
type CIMVoipByeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalCallTimeLen uint64           `protobuf:"varint,1,opt,name=local_call_time_len,json=localCallTimeLen,proto3" json:"local_call_time_len,omitempty"`      // 本地通话时长计数
	UserId           uint64           `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                        // 挂断方用户ID
	ChannelInfo      *CIMChannelInfo  `protobuf:"bytes,3,opt,name=channel_info,json=channelInfo,proto3" json:"channel_info,omitempty"`                          // 频道信息
	ByeReason        CIMVoipByeReason `protobuf:"varint,4,opt,name=bye_reason,json=byeReason,proto3,enum=CIM.Def.CIMVoipByeReason" json:"bye_reason,omitempty"` // 挂断原因
}

func (x *CIMVoipByeReq) Reset() {
	*x = CIMVoipByeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CIM_Voip_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CIMVoipByeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CIMVoipByeReq) ProtoMessage() {}

func (x *CIMVoipByeReq) ProtoReflect() protoreflect.Message {
	mi := &file_CIM_Voip_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CIMVoipByeReq.ProtoReflect.Descriptor instead.
func (*CIMVoipByeReq) Descriptor() ([]byte, []int) {
	return file_CIM_Voip_proto_rawDescGZIP(), []int{4}
}

func (x *CIMVoipByeReq) GetLocalCallTimeLen() uint64 {
	if x != nil {
		return x.LocalCallTimeLen
	}
	return 0
}

func (x *CIMVoipByeReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CIMVoipByeReq) GetChannelInfo() *CIMChannelInfo {
	if x != nil {
		return x.ChannelInfo
	}
	return nil
}

func (x *CIMVoipByeReq) GetByeReason() CIMVoipByeReason {
	if x != nil {
		return x.ByeReason
	}
	return CIMVoipByeReason_kCIM_VOIP_BYE_REASON_UNKNOWN
}

// 挂断响应
type CIMVoipByeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode CIMErrorCode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=CIM.Def.CIMErrorCode" json:"error_code,omitempty"` // 结果
}

func (x *CIMVoipByeRsp) Reset() {
	*x = CIMVoipByeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CIM_Voip_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CIMVoipByeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CIMVoipByeRsp) ProtoMessage() {}

func (x *CIMVoipByeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_CIM_Voip_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CIMVoipByeRsp.ProtoReflect.Descriptor instead.
func (*CIMVoipByeRsp) Descriptor() ([]byte, []int) {
	return file_CIM_Voip_proto_rawDescGZIP(), []int{5}
}

func (x *CIMVoipByeRsp) GetErrorCode() CIMErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return CIMErrorCode_kCIM_ERR_UNKNOWN
}

// 挂断通知
type CIMVoipByeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      uint64           `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                       // 挂断方用户ID
	ChannelInfo *CIMChannelInfo  `protobuf:"bytes,2,opt,name=channel_info,json=channelInfo,proto3" json:"channel_info,omitempty"`         // 频道信息
	ByeReason   CIMVoipByeReason `protobuf:"varint,3,opt,name=byeReason,proto3,enum=CIM.Def.CIMVoipByeReason" json:"byeReason,omitempty"` // 挂断原因
}

func (x *CIMVoipByeNotify) Reset() {
	*x = CIMVoipByeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CIM_Voip_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CIMVoipByeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CIMVoipByeNotify) ProtoMessage() {}

func (x *CIMVoipByeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_CIM_Voip_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CIMVoipByeNotify.ProtoReflect.Descriptor instead.
func (*CIMVoipByeNotify) Descriptor() ([]byte, []int) {
	return file_CIM_Voip_proto_rawDescGZIP(), []int{6}
}

func (x *CIMVoipByeNotify) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CIMVoipByeNotify) GetChannelInfo() *CIMChannelInfo {
	if x != nil {
		return x.ChannelInfo
	}
	return nil
}

func (x *CIMVoipByeNotify) GetByeReason() CIMVoipByeReason {
	if x != nil {
		return x.ByeReason
	}
	return CIMVoipByeReason_kCIM_VOIP_BYE_REASON_UNKNOWN
}

var File_CIM_Voip_proto protoreflect.FileDescriptor

var file_CIM_Voip_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x43, 0x49, 0x4d, 0x2e, 0x56, 0x6f, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x43, 0x49, 0x4d, 0x2e, 0x56, 0x6f, 0x69, 0x70, 0x1a, 0x0d, 0x43, 0x49, 0x4d, 0x2e,
	0x44, 0x65, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x01, 0x0a, 0x10, 0x43, 0x49,
	0x4d, 0x56, 0x6f, 0x69, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x26,
	0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3b, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x44, 0x65, 0x66, 0x2e,
	0x43, 0x49, 0x4d, 0x56, 0x6f, 0x69, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x44, 0x65, 0x66, 0x2e, 0x43, 0x49,
	0x4d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9f, 0x01, 0x0a, 0x12, 0x43, 0x49,
	0x4d, 0x56, 0x6f, 0x69, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x73, 0x70,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43, 0x49,
	0x4d, 0x2e, 0x44, 0x65, 0x66, 0x2e, 0x43, 0x49, 0x4d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52,
	0x73, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x73, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x3a, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x44, 0x65, 0x66, 0x2e,
	0x43, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x53, 0x0a, 0x15, 0x43,
	0x49, 0x4d, 0x56, 0x6f, 0x69, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x41, 0x63, 0x6b, 0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x49, 0x4d,
	0x2e, 0x44, 0x65, 0x66, 0x2e, 0x43, 0x49, 0x4d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x12, 0x0a, 0x10, 0x43, 0x49, 0x4d, 0x56, 0x6f, 0x69, 0x70, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x0d, 0x43, 0x49, 0x4d, 0x56, 0x6f, 0x69, 0x70,
	0x42, 0x79, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x44, 0x65, 0x66, 0x2e, 0x43,
	0x49, 0x4d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0a, 0x62, 0x79,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x44, 0x65, 0x66, 0x2e, 0x43, 0x49, 0x4d, 0x56, 0x6f, 0x69, 0x70,
	0x42, 0x79, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x62, 0x79, 0x65, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x0d, 0x43, 0x49, 0x4d, 0x56, 0x6f, 0x69, 0x70, 0x42,
	0x79, 0x65, 0x52, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43, 0x49, 0x4d, 0x2e,
	0x44, 0x65, 0x66, 0x2e, 0x43, 0x49, 0x4d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x10,
	0x43, 0x49, 0x4d, 0x56, 0x6f, 0x69, 0x70, 0x42, 0x79, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x44, 0x65, 0x66, 0x2e, 0x43, 0x49, 0x4d, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x09, 0x62, 0x79, 0x65, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43, 0x49, 0x4d, 0x2e, 0x44,
	0x65, 0x66, 0x2e, 0x43, 0x49, 0x4d, 0x56, 0x6f, 0x69, 0x70, 0x42, 0x79, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x09, 0x62, 0x79, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x22,
	0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x48, 0x03, 0x5a, 0x05, 0x2e, 0x3b, 0x63,
	0x69, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_CIM_Voip_proto_rawDescOnce sync.Once
	file_CIM_Voip_proto_rawDescData = file_CIM_Voip_proto_rawDesc
)

func file_CIM_Voip_proto_rawDescGZIP() []byte {
	file_CIM_Voip_proto_rawDescOnce.Do(func() {
		file_CIM_Voip_proto_rawDescData = protoimpl.X.CompressGZIP(file_CIM_Voip_proto_rawDescData)
	})
	return file_CIM_Voip_proto_rawDescData
}

var file_CIM_Voip_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_CIM_Voip_proto_goTypes = []interface{}{
	(*CIMVoipInviteReq)(nil),      // 0: CIM.Voip.CIMVoipInviteReq
	(*CIMVoipInviteReply)(nil),    // 1: CIM.Voip.CIMVoipInviteReply
	(*CIMVoipInviteReplyAck)(nil), // 2: CIM.Voip.CIMVoipInviteReplyAck
	(*CIMVoipHeartbeat)(nil),      // 3: CIM.Voip.CIMVoipHeartbeat
	(*CIMVoipByeReq)(nil),         // 4: CIM.Voip.CIMVoipByeReq
	(*CIMVoipByeRsp)(nil),         // 5: CIM.Voip.CIMVoipByeRsp
	(*CIMVoipByeNotify)(nil),      // 6: CIM.Voip.CIMVoipByeNotify
	(CIMVoipInviteType)(0),        // 7: CIM.Def.CIMVoipInviteType
	(*CIMChannelInfo)(nil),        // 8: CIM.Def.CIMChannelInfo
	(CIMInviteRspCode)(0),         // 9: CIM.Def.CIMInviteRspCode
	(CIMVoipByeReason)(0),         // 10: CIM.Def.CIMVoipByeReason
	(CIMErrorCode)(0),             // 11: CIM.Def.CIMErrorCode
}
var file_CIM_Voip_proto_depIdxs = []int32{
	7,  // 0: CIM.Voip.CIMVoipInviteReq.invite_type:type_name -> CIM.Def.CIMVoipInviteType
	8,  // 1: CIM.Voip.CIMVoipInviteReq.channel_info:type_name -> CIM.Def.CIMChannelInfo
	9,  // 2: CIM.Voip.CIMVoipInviteReply.rsp_code:type_name -> CIM.Def.CIMInviteRspCode
	8,  // 3: CIM.Voip.CIMVoipInviteReply.channel_info:type_name -> CIM.Def.CIMChannelInfo
	8,  // 4: CIM.Voip.CIMVoipInviteReplyAck.channel_info:type_name -> CIM.Def.CIMChannelInfo
	8,  // 5: CIM.Voip.CIMVoipByeReq.channel_info:type_name -> CIM.Def.CIMChannelInfo
	10, // 6: CIM.Voip.CIMVoipByeReq.bye_reason:type_name -> CIM.Def.CIMVoipByeReason
	11, // 7: CIM.Voip.CIMVoipByeRsp.error_code:type_name -> CIM.Def.CIMErrorCode
	8,  // 8: CIM.Voip.CIMVoipByeNotify.channel_info:type_name -> CIM.Def.CIMChannelInfo
	10, // 9: CIM.Voip.CIMVoipByeNotify.byeReason:type_name -> CIM.Def.CIMVoipByeReason
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_CIM_Voip_proto_init() }
func file_CIM_Voip_proto_init() {
	if File_CIM_Voip_proto != nil {
		return
	}
	file_CIM_Def_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_CIM_Voip_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CIMVoipInviteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CIM_Voip_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CIMVoipInviteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CIM_Voip_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CIMVoipInviteReplyAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CIM_Voip_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CIMVoipHeartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CIM_Voip_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CIMVoipByeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CIM_Voip_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CIMVoipByeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CIM_Voip_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CIMVoipByeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_CIM_Voip_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_CIM_Voip_proto_goTypes,
		DependencyIndexes: file_CIM_Voip_proto_depIdxs,
		MessageInfos:      file_CIM_Voip_proto_msgTypes,
	}.Build()
	File_CIM_Voip_proto = out.File
	file_CIM_Voip_proto_rawDesc = nil
	file_CIM_Voip_proto_goTypes = nil
	file_CIM_Voip_proto_depIdxs = nil
}
